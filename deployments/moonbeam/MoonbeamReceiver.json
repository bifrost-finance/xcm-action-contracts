{
  "address": "0x5e2DBf9659b64C135912DB1cb2f5397c611e8002",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "derivativeAddress",
          "type": "address"
        }
      ],
      "name": "SetDerivativeAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "scriptTrigger",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "layerZeroFee",
          "type": "uint256"
        }
      ],
      "name": "SetLayerZeroFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "scriptTrigger",
          "type": "address"
        }
      ],
      "name": "SetScriptTrigger",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BNC",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MANTA",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VMANTA",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "callerToDerivativeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "claimManta",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "claimVManta",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "destChainId",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "layerZeroFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mantaOFT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mantaPacificSlpx",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "from",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "onOFTReceived",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "scriptTrigger",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setDerivativeAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_layerZeroFee",
          "type": "uint256"
        }
      ],
      "name": "setLayerZeroFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mantaPacificSlpx",
          "type": "address"
        }
      ],
      "name": "setRemoteContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_scriptTrigger",
          "type": "address"
        }
      ],
      "name": "setScriptTrigger",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slpx",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vMantaProxyOFT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x10e87e464b80ea39dcf2e1d4cba11cc6fde94d95a1b9a93452370148102c0588",
  "receipt": {
    "to": null,
    "from": "0x4597C97a43dFBb4a398E2b16AA9cE61f90d801DD",
    "contractAddress": "0x5e2DBf9659b64C135912DB1cb2f5397c611e8002",
    "transactionIndex": 0,
    "gasUsed": "3699894",
    "logsBloom": "0x
    "blockHash": "0x355304ddc6f0d93e110d397a66496fbd1a919878e0ad063f4b0059d044ecf1df",
    "transactionHash": "0x10e87e464b80ea39dcf2e1d4cba11cc6fde94d95a1b9a93452370148102c0588",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 8279179,
        "transactionHash": "0x10e87e464b80ea39dcf2e1d4cba11cc6fde94d95a1b9a93452370148102c0588",
        "address": "0x5e2DBf9659b64C135912DB1cb2f5397c611e8002",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004597c97a43dfbb4a398e2b16aa9ce61f90d801dd"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x355304ddc6f0d93e110d397a66496fbd1a919878e0ad063f4b0059d044ecf1df"
      }
    ],
    "blockNumber": 8279179,
    "cumulativeGasUsed": "3699894",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 10,
  "solcInputHash": "25c7bcbbffe077141b1ba1d0946a3d5c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"derivativeAddress\",\"type\":\"address\"}],\"name\":\"SetDerivativeAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"scriptTrigger\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"layerZeroFee\",\"type\":\"uint256\"}],\"name\":\"SetLayerZeroFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"scriptTrigger\",\"type\":\"address\"}],\"name\":\"SetScriptTrigger\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BNC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANTA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VMANTA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"callerToDerivativeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"claimManta\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"claimVManta\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destChainId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"layerZeroFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mantaOFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mantaPacificSlpx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"from\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"onOFTReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scriptTrigger\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setDerivativeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_layerZeroFee\",\"type\":\"uint256\"}],\"name\":\"setLayerZeroFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mantaPacificSlpx\",\"type\":\"address\"}],\"name\":\"setRemoteContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_scriptTrigger\",\"type\":\"address\"}],\"name\":\"setScriptTrigger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slpx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vMantaProxyOFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MoonbeamReceiver.sol\":\"MoonbeamReceiver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xad32f6821f860555f9530902a65b54203a4f5db2117f4384ae47a124958078db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40) // Get free memory pointer\\n\\n            // |                   | \\u2193 ptr ...  \\u2193 ptr + 0x0B (start) ...  \\u2193 ptr + 0x20 ...  \\u2193 ptr + 0x40 ...   |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\n            // | 0xFF              |            FF                                                             |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\n            // | keccak(start, 85) |            \\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191 |\\n\\n            mstore(add(ptr, 0x40), bytecodeHash)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\\n            mstore8(start, 0xff)\\n            addr := keccak256(start, 85)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6e00f269073ffc4350e56b7e8153c9092d5f70bfba423299990514183101ef89\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/DerivativeContract.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract DerivativeContract is ReentrancyGuard {\\n    address public receiver;\\n\\n    event Withdraw(address caller, address to, address token, uint256 amount);\\n\\n    constructor() {\\n        receiver = msg.sender;\\n    }\\n\\n    function withdrawErc20Token(\\n        address _erc20\\n    ) external nonReentrant returns (uint256) {\\n        require(msg.sender == receiver, \\\"forbidden\\\");\\n        require(_erc20 != address(0), \\\"invalid erc20\\\");\\n        uint256 balance = IERC20(_erc20).balanceOf(address(this));\\n        require(balance != 0, \\\"balance to low\\\");\\n        IERC20(_erc20).transfer(receiver, balance);\\n        emit Withdraw(msg.sender, receiver, _erc20, balance);\\n        return balance;\\n    }\\n\\n    function withdrawNativeToken(uint256 _amount) external nonReentrant {\\n        require(msg.sender == receiver, \\\"forbidden\\\");\\n        require(_amount != 0, \\\"balance to low\\\");\\n        (bool success, ) = receiver.call{value: _amount}(\\\"\\\");\\n        require(success, \\\"failed to withdrawNativeToken\\\");\\n        emit Withdraw(msg.sender, receiver, address(0), _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x74896f703bea9afb3487c742c1566aa62860ea27b3ed15417fa3f0e4281ad10b\",\"license\":\"Apache-2.0\"},\"contracts/MoonbeamReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\nimport \\\"./interfaces/IOFTReceiverV2.sol\\\";\\nimport \\\"./interfaces/IOFTV2.sol\\\";\\nimport \\\"./interfaces/ISlpx.sol\\\";\\nimport \\\"./DerivativeContract.sol\\\";\\nimport \\\"./MoonbeamSlpx.sol\\\";\\nimport \\\"./utils/BuildCallData.sol\\\";\\nimport \\\"./utils/AddressToAccount.sol\\\";\\nimport \\\"./interfaces/Xtokens.sol\\\";\\nimport \\\"./interfaces/XcmTransactorV2.sol\\\";\\n\\ncontract MoonbeamReceiver is Ownable, IOFTReceiverV2 {\\n    uint16 public constant destChainId = 217;\\n\\n    address public constant VMANTA = 0xFFfFFfFfdA2a05FB50e7ae99275F4341AEd43379;\\n    address public constant MANTA = 0xfFFffFFf7D3875460d4509eb8d0362c611B4E841;\\n    address public constant BNC = 0xFFffffFf7cC06abdF7201b350A1265c62C8601d2;\\n    bytes2 private constant MANTA_CURRENCY_ID = 0x0808;\\n    bytes2 private constant VMANTA_CURRENCY_ID = 0x0908;\\n    bytes1 private constant MOONBEAM_CHAIN_TYPE = 0x01;\\n    address public constant slpx = 0xF1d4797E51a4640a76769A50b57abE7479ADd3d8;\\n    address public constant mantaOFT =\\n        0x17313cE6e47D796E61fDeAc34Ab1F58e3e089082;\\n    address public constant vMantaProxyOFT =\\n        0xDeBBb9309d95DaBbFb82411a9C6Daa3909B164A4;\\n    address internal constant XTOKENS =\\n        0x0000000000000000000000000000000000000804;\\n    address internal constant XCM_TRANSACTORV2_ADDRESS =\\n        0x000000000000000000000000000000000000080D;\\n    address public mantaPacificSlpx;\\n    uint256 public layerZeroFee;\\n    address public scriptTrigger;\\n    mapping(address => address) public callerToDerivativeAddress;\\n\\n    event SetDerivativeAddress(\\n        address indexed caller,\\n        address indexed derivativeAddress\\n    );\\n    event SetLayerZeroFee(\\n        address indexed scriptTrigger,\\n        uint256 indexed layerZeroFee\\n    );\\n    event SetScriptTrigger(address indexed scriptTrigger);\\n\\n    function xcmTransferAsset(\\n        address assetAddress,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        require(assetAddress != address(0), \\\"Invalid assetAddress\\\");\\n        bytes32 publicKey = AddressToAccount.AddressToSubstrateAccount(to);\\n        Xtokens.Multilocation memory dest_account = getXtokensDestination(\\n            publicKey\\n        );\\n        Xtokens(XTOKENS).transfer(\\n            assetAddress,\\n            amount,\\n            dest_account,\\n            type(uint64).max\\n        );\\n    }\\n\\n    function getXtokensDestination(\\n        bytes32 publicKey\\n    ) internal pure returns (Xtokens.Multilocation memory) {\\n        bytes[] memory interior = new bytes[](2);\\n        interior[0] = bytes.concat(hex\\\"00\\\", bytes4(uint32(2030)));\\n        interior[1] = bytes.concat(hex\\\"01\\\", publicKey, hex\\\"00\\\");\\n        Xtokens.Multilocation memory dest = Xtokens.Multilocation({\\n            parents: 1,\\n            interior: interior\\n        });\\n        return dest;\\n    }\\n\\n    function getXcmTransactorDestination()\\n        internal\\n        pure\\n        returns (XcmTransactorV2.Multilocation memory)\\n    {\\n        bytes[] memory interior = new bytes[](1);\\n        interior[0] = bytes.concat(hex\\\"00\\\", bytes4(uint32(2030)));\\n        XcmTransactorV2.Multilocation\\n            memory xcmTransactorDestination = XcmTransactorV2.Multilocation({\\n                parents: 1,\\n                interior: interior\\n            });\\n        return xcmTransactorDestination;\\n    }\\n\\n    function create_order(\\n        address caller,\\n        address assetAddress,\\n        bytes2 token,\\n        uint128 amount,\\n        address receiver,\\n        uint32 channel_id\\n    ) internal {\\n        require(amount > 0, \\\"amount must be greater than 0\\\");\\n        xcmTransferAsset(assetAddress, caller, uint256(amount));\\n\\n        // Build bifrost slpx create order call data\\n        bytes memory callData = BuildCallData.buildCreateOrderCallBytes(\\n            caller,\\n            block.chainid,\\n            block.number,\\n            token,\\n            amount,\\n            abi.encodePacked(MOONBEAM_CHAIN_TYPE, receiver),\\n            \\\"MantaPacificV2\\\",\\n            channel_id\\n        );\\n        // XCM Transact\\n        (\\n            uint64 transactRequiredWeightAtMost,\\n            uint256 feeAmount,\\n            uint64 overallWeight\\n        ) = MoonbeamSlpx(slpx).operationToFeeInfo(MoonbeamSlpx.Operation.Mint);\\n        XcmTransactorV2(XCM_TRANSACTORV2_ADDRESS).transactThroughSigned(\\n            getXcmTransactorDestination(),\\n            BNC,\\n            transactRequiredWeightAtMost,\\n            callData,\\n            feeAmount,\\n            overallWeight\\n        );\\n    }\\n\\n    function setRemoteContract(address _mantaPacificSlpx) public onlyOwner {\\n        require(_mantaPacificSlpx != address(0), \\\"Invalid mantaPacificSlpx\\\");\\n        mantaPacificSlpx = _mantaPacificSlpx;\\n    }\\n\\n    function onOFTReceived(\\n        uint16 srcChainId,\\n        bytes calldata,\\n        uint64,\\n        bytes32 from,\\n        uint amount,\\n        bytes calldata payload\\n    ) external override {\\n        require(\\n            srcChainId == destChainId,\\n            \\\"only receive msg from manta pacific\\\"\\n        );\\n        require(\\n            _msgSender() == mantaOFT || _msgSender() == vMantaProxyOFT,\\n            \\\"only native oft can call\\\"\\n        );\\n        require(\\n            address(uint160(uint(from))) == mantaPacificSlpx,\\n            \\\"only receive msg from mantaPacificSlpx\\\"\\n        );\\n        (address caller, uint32 channel_id) = abi.decode(\\n            payload,\\n            (address, uint32)\\n        );\\n\\n        if (callerToDerivativeAddress[caller] == address(0)) {\\n            setDerivativeAddress(caller);\\n        }\\n\\n        // vManta:\\n        // msg.sender = vMantaProxyOFT, from = mantaPacificSlpx,\\n        // Manta:\\n        // msg.sender = mantaOFT, from = mantaPacificSlpx\\n        address asset_address;\\n        if (_msgSender() == mantaOFT) {\\n            bool success = IERC20(MANTA).transfer(scriptTrigger, layerZeroFee);\\n            require(success, \\\"failed to charge\\\");\\n            asset_address = MANTA;\\n        } else if (_msgSender() == vMantaProxyOFT) {\\n            bool success = IERC20(VMANTA).transfer(scriptTrigger, layerZeroFee);\\n            require(success, \\\"failed to charge\\\");\\n            asset_address = VMANTA;\\n        } else {\\n            revert(\\\"invalid msg.sender\\\");\\n        }\\n\\n        create_order(\\n            caller,\\n            asset_address,\\n            asset_address == MANTA ? MANTA_CURRENCY_ID : VMANTA_CURRENCY_ID,\\n            uint128(amount - layerZeroFee),\\n            callerToDerivativeAddress[caller],\\n            channel_id\\n        );\\n    }\\n\\n    function claimVManta(\\n        address addr,\\n        bytes calldata _adapterParams\\n    ) external payable {\\n        require(_msgSender() == scriptTrigger, \\\"must be scriptTrigger\\\");\\n        address derivativeAddress = callerToDerivativeAddress[addr];\\n        require(derivativeAddress != address(0), \\\"invalid address\\\");\\n        uint256 amount = DerivativeContract(derivativeAddress)\\n            .withdrawErc20Token(VMANTA);\\n        IERC20(VMANTA).approve(vMantaProxyOFT, amount);\\n        ICommonOFT.LzCallParams memory callParams = ICommonOFT.LzCallParams(\\n            payable(_msgSender()),\\n            address(0),\\n            _adapterParams\\n        );\\n        bytes32 toAddress = bytes32(uint256(uint160(addr)));\\n        (uint256 estimateFee, ) = IOFTV2(vMantaProxyOFT).estimateSendFee(\\n            destChainId,\\n            toAddress,\\n            amount,\\n            false,\\n            _adapterParams\\n        );\\n        require(msg.value >= estimateFee, \\\"too small fee\\\");\\n        if (msg.value != estimateFee) {\\n            uint256 refundAmount = msg.value - estimateFee;\\n            (bool success, ) = _msgSender().call{value: refundAmount}(\\\"\\\");\\n            require(success, \\\"failed to refund\\\");\\n        }\\n        IOFTV2(vMantaProxyOFT).sendFrom{value: estimateFee}(\\n            address(this),\\n            destChainId,\\n            toAddress,\\n            amount,\\n            callParams\\n        );\\n    }\\n\\n    function claimManta(\\n        address addr,\\n        bytes calldata _adapterParams\\n    ) external payable {\\n        require(_msgSender() == scriptTrigger, \\\"must be scriptTrigger\\\");\\n        address derivativeAddress = callerToDerivativeAddress[addr];\\n        require(derivativeAddress != address(0), \\\"invalid address\\\");\\n        uint256 amount = DerivativeContract(derivativeAddress)\\n            .withdrawErc20Token(MANTA);\\n        IERC20(MANTA).approve(mantaOFT, amount);\\n        ICommonOFT.LzCallParams memory callParams = ICommonOFT.LzCallParams(\\n            payable(_msgSender()),\\n            address(0),\\n            _adapterParams\\n        );\\n        bytes32 toAddress = bytes32(uint256(uint160(addr)));\\n        (uint256 estimateFee, ) = IOFTV2(mantaOFT).estimateSendFee(\\n            destChainId,\\n            toAddress,\\n            amount,\\n            false,\\n            _adapterParams\\n        );\\n        require(msg.value >= estimateFee, \\\"too small fee\\\");\\n        if (msg.value != estimateFee) {\\n            uint256 refundAmount = msg.value - estimateFee;\\n            (bool success, ) = _msgSender().call{value: refundAmount}(\\\"\\\");\\n            require(success, \\\"failed to refund\\\");\\n        }\\n        IOFTV2(mantaOFT).sendFrom{value: estimateFee}(\\n            address(this),\\n            destChainId,\\n            toAddress,\\n            amount,\\n            callParams\\n        );\\n    }\\n\\n    function setDerivativeAddress(address addr) public {\\n        require(\\n            callerToDerivativeAddress[addr] == address(0),\\n            \\\"already set derivativeAddress\\\"\\n        );\\n        bytes memory bytecode = type(DerivativeContract).creationCode;\\n        bytes32 salt = bytes32(uint256(uint160(addr)));\\n        address derivativeAddress = Create2.deploy(0, salt, bytecode);\\n        callerToDerivativeAddress[addr] = derivativeAddress;\\n        emit SetDerivativeAddress(addr, derivativeAddress);\\n    }\\n\\n    function setLayerZeroFee(uint256 _layerZeroFee) external {\\n        require(_msgSender() == scriptTrigger, \\\"must be scriptTrigger\\\");\\n        layerZeroFee = _layerZeroFee;\\n        emit SetLayerZeroFee(scriptTrigger, _layerZeroFee);\\n    }\\n\\n    function setScriptTrigger(address _scriptTrigger) external onlyOwner {\\n        require(_scriptTrigger != address(0), \\\"invalid address\\\");\\n        scriptTrigger = _scriptTrigger;\\n        emit SetScriptTrigger(_scriptTrigger);\\n    }\\n}\\n\",\"keccak256\":\"0x8a30a01f6ccd66b912470cc4060207563a53a54081a7aba4842a6aa5cc9a4871\",\"license\":\"Apache-2.0\"},\"contracts/MoonbeamSlpx.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\nimport \\\"./interfaces/XcmTransactorV2.sol\\\";\\nimport \\\"./interfaces/Xtokens.sol\\\";\\nimport \\\"./interfaces/ISlpx.sol\\\";\\nimport \\\"./utils/AddressToAccount.sol\\\";\\nimport \\\"./utils/BuildCallData.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\ncontract MoonbeamSlpx is ISlpx, OwnableUpgradeable, PausableUpgradeable {\\n    address internal constant NATIVE_ASSET_ADDRESS =\\n        0x0000000000000000000000000000000000000802;\\n    address internal constant XCM_TRANSACTORV2_ADDRESS =\\n        0x000000000000000000000000000000000000080D;\\n    address internal constant XTOKENS =\\n        0x0000000000000000000000000000000000000804;\\n    bytes1 internal constant MOONBEAM_CHAIN = 0x01;\\n\\n    XcmTransactorV2.Multilocation internal xcmTransactorDestination;\\n\\n    address public BNCAddress;\\n    uint32 public bifrostParaId;\\n\\n    enum Operation {\\n        Mint,\\n        Redeem,\\n        ZenlinkSwap,\\n        StableSwap\\n    }\\n\\n    struct AssetInfo {\\n        bytes2 currencyId;\\n        uint256 operationalMin;\\n    }\\n\\n    struct FeeInfo {\\n        uint64 transactRequiredWeightAtMost;\\n        uint256 feeAmount;\\n        uint64 overallWeight;\\n    }\\n\\n    mapping(address => AssetInfo) public addressToAssetInfo;\\n    mapping(Operation => FeeInfo) public operationToFeeInfo;\\n\\n    struct DestChainInfo {\\n        bool is_evm;\\n        bool is_substrate;\\n        bytes1 raw_chain_index;\\n    }\\n    mapping(uint64 => DestChainInfo) public destChainInfo;\\n\\n    function checkAssetIsExist(\\n        address assetAddress\\n    ) internal view returns (bytes2) {\\n        AssetInfo memory assetInfo = addressToAssetInfo[assetAddress];\\n        require(assetInfo.operationalMin > 0, \\\"Asset is not exist\\\");\\n        require(assetInfo.currencyId != bytes2(0), \\\"Invalid asset\\\");\\n        return assetInfo.currencyId;\\n    }\\n\\n    function checkFeeInfo(\\n        Operation operation\\n    ) internal view returns (FeeInfo memory) {\\n        FeeInfo memory feeInfo = operationToFeeInfo[operation];\\n        require(\\n            feeInfo.transactRequiredWeightAtMost > 0,\\n            \\\"Invalid transactRequiredWeightAtMost\\\"\\n        );\\n        require(feeInfo.feeAmount > 0, \\\"Invalid feeAmount\\\");\\n        require(feeInfo.overallWeight > 0, \\\"Invalid overallWeight\\\");\\n        return feeInfo;\\n    }\\n\\n    function initialize(\\n        address _BNCAddress,\\n        uint32 _bifrostParaId,\\n        bytes2 _nativeCurrencyId\\n    ) public initializer {\\n        __Ownable_init();\\n        __Pausable_init();\\n        require(_BNCAddress != address(0), \\\"Invalid address\\\");\\n        require(\\n            _bifrostParaId == 2001 || _bifrostParaId == 2030,\\n            \\\"Invalid bifrostParaId\\\"\\n        );\\n        require(\\n            _nativeCurrencyId == 0x020a || _nativeCurrencyId == 0x0801,\\n            \\\"Invalid nativeCurrencyId\\\"\\n        );\\n\\n        setAssetAddressInfo(_BNCAddress, 0x0001, 1_000_000_000_000);\\n        setAssetAddressInfo(\\n            NATIVE_ASSET_ADDRESS,\\n            _nativeCurrencyId,\\n            1_000_000_000_000_000_000\\n        );\\n\\n        BNCAddress = _BNCAddress;\\n        bifrostParaId = _bifrostParaId;\\n\\n        // Init xcmTransactorDestination\\n        bytes[] memory interior = new bytes[](1);\\n        // Parachain: 2001/2030\\n        interior[0] = bytes.concat(hex\\\"00\\\", bytes4(_bifrostParaId));\\n        xcmTransactorDestination = XcmTransactorV2.Multilocation({\\n            parents: 1,\\n            interior: interior\\n        });\\n    }\\n\\n    function setOperationToFeeInfo(\\n        Operation _operation,\\n        uint64 _transactRequiredWeightAtMost,\\n        uint64 _overallWeight,\\n        uint256 _feeAmount\\n    ) public onlyOwner {\\n        operationToFeeInfo[_operation] = FeeInfo(\\n            _transactRequiredWeightAtMost,\\n            _feeAmount,\\n            _overallWeight\\n        );\\n    }\\n\\n    function setAssetAddressInfo(\\n        address assetAddress,\\n        bytes2 currencyId,\\n        uint256 minimumValue\\n    ) public onlyOwner {\\n        require(assetAddress != address(0), \\\"Invalid assetAddress\\\");\\n        require(minimumValue != 0, \\\"Invalid minimumValue\\\");\\n        require(currencyId != bytes2(0), \\\"Invalid currencyId\\\");\\n        AssetInfo storage assetInfo = addressToAssetInfo[assetAddress];\\n        assetInfo.currencyId = currencyId;\\n        assetInfo.operationalMin = minimumValue;\\n    }\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function xcmTransferAsset(address assetAddress, uint256 amount) internal {\\n        require(assetAddress != address(0), \\\"Invalid assetAddress\\\");\\n        require(\\n            amount >= addressToAssetInfo[assetAddress].operationalMin,\\n            \\\"Less than MinimumValue\\\"\\n        );\\n        bytes32 publicKey = AddressToAccount.AddressToSubstrateAccount(\\n            _msgSender()\\n        );\\n        Xtokens.Multilocation memory dest_account = getXtokensDestination(\\n            publicKey\\n        );\\n        IERC20 asset = IERC20(assetAddress);\\n        asset.transferFrom(_msgSender(), address(this), amount);\\n        Xtokens(XTOKENS).transfer(\\n            assetAddress,\\n            amount,\\n            dest_account,\\n            type(uint64).max\\n        );\\n    }\\n\\n    function xcmTransferNativeAsset(uint256 amount) internal {\\n        require(\\n            amount >= addressToAssetInfo[NATIVE_ASSET_ADDRESS].operationalMin,\\n            \\\"Less than MinimumValue\\\"\\n        );\\n        bytes32 publicKey = AddressToAccount.AddressToSubstrateAccount(\\n            _msgSender()\\n        );\\n\\n        Xtokens.Multilocation memory dest_account = getXtokensDestination(\\n            publicKey\\n        );\\n        Xtokens(XTOKENS).transfer(\\n            NATIVE_ASSET_ADDRESS,\\n            amount,\\n            dest_account,\\n            type(uint64).max\\n        );\\n    }\\n\\n    function mintVNativeAsset(\\n        address receiver,\\n        string memory remark\\n    ) external payable override whenNotPaused {\\n        require(bytes(remark).length <= 32, \\\"remark too long\\\");\\n        bytes2 nativeToken = checkAssetIsExist(NATIVE_ASSET_ADDRESS);\\n        // xtokens call\\n        xcmTransferNativeAsset(msg.value);\\n\\n        // Build bifrost xcm-action mint call data\\n        bytes memory targetChain = abi.encodePacked(MOONBEAM_CHAIN, receiver);\\n        bytes memory callData = BuildCallData.buildMintCallBytes(\\n            _msgSender(),\\n            nativeToken,\\n            targetChain,\\n            remark\\n        );\\n        // XCM Transact\\n        FeeInfo memory feeInfo = checkFeeInfo(Operation.Mint);\\n        XcmTransactorV2(XCM_TRANSACTORV2_ADDRESS).transactThroughSigned(\\n            xcmTransactorDestination,\\n            BNCAddress,\\n            feeInfo.transactRequiredWeightAtMost,\\n            callData,\\n            feeInfo.feeAmount,\\n            feeInfo.overallWeight\\n        );\\n        emit Mint(\\n            _msgSender(),\\n            NATIVE_ASSET_ADDRESS,\\n            msg.value,\\n            receiver,\\n            callData,\\n            remark\\n        );\\n    }\\n\\n    function mintVAsset(\\n        address assetAddress,\\n        uint256 amount,\\n        address receiver,\\n        string memory remark\\n    ) external override whenNotPaused {\\n        require(bytes(remark).length <= 32, \\\"remark too long\\\");\\n\\n        bytes2 token = checkAssetIsExist(assetAddress);\\n\\n        // xtokens call\\n        xcmTransferAsset(assetAddress, amount);\\n\\n        // Build bifrost xcm-action mint call data\\n        bytes memory targetChain = abi.encodePacked(MOONBEAM_CHAIN, receiver);\\n        bytes memory callData = BuildCallData.buildMintCallBytes(\\n            _msgSender(),\\n            token,\\n            targetChain,\\n            remark\\n        );\\n        // XCM Transact\\n        FeeInfo memory feeInfo = checkFeeInfo(Operation.Mint);\\n        XcmTransactorV2(XCM_TRANSACTORV2_ADDRESS).transactThroughSigned(\\n            xcmTransactorDestination,\\n            BNCAddress,\\n            feeInfo.transactRequiredWeightAtMost,\\n            callData,\\n            feeInfo.feeAmount,\\n            feeInfo.overallWeight\\n        );\\n        emit Mint(\\n            _msgSender(),\\n            assetAddress,\\n            amount,\\n            receiver,\\n            callData,\\n            remark\\n        );\\n    }\\n\\n    function mintVNativeAssetWithChannelId(\\n        address receiver,\\n        string memory remark,\\n        uint32 channel_id\\n    ) external payable override whenNotPaused {\\n        require(bytes(remark).length <= 32, \\\"remark too long\\\");\\n        bytes2 nativeToken = checkAssetIsExist(NATIVE_ASSET_ADDRESS);\\n        // xtokens call\\n        xcmTransferNativeAsset(msg.value);\\n\\n        // Build bifrost xcm-action mint call data\\n        bytes memory targetChain = abi.encodePacked(MOONBEAM_CHAIN, receiver);\\n        bytes memory callData = BuildCallData.buildMintWithChannelIdCallBytes(\\n            _msgSender(),\\n            nativeToken,\\n            targetChain,\\n            remark,\\n            channel_id\\n        );\\n        // XCM Transact\\n        FeeInfo memory feeInfo = checkFeeInfo(Operation.Mint);\\n        XcmTransactorV2(XCM_TRANSACTORV2_ADDRESS).transactThroughSigned(\\n            xcmTransactorDestination,\\n            BNCAddress,\\n            feeInfo.transactRequiredWeightAtMost,\\n            callData,\\n            feeInfo.feeAmount,\\n            feeInfo.overallWeight\\n        );\\n        emit Mint(\\n            _msgSender(),\\n            NATIVE_ASSET_ADDRESS,\\n            msg.value,\\n            receiver,\\n            callData,\\n            remark\\n        );\\n    }\\n\\n    function mintVAssetWithChannelId(\\n        address assetAddress,\\n        uint256 amount,\\n        address receiver,\\n        string memory remark,\\n        uint32 channel_id\\n    ) external override whenNotPaused {\\n        require(bytes(remark).length <= 32, \\\"remark too long\\\");\\n\\n        bytes2 token = checkAssetIsExist(assetAddress);\\n\\n        // xtokens call\\n        xcmTransferAsset(assetAddress, amount);\\n\\n        // Build bifrost xcm-action mint call data\\n        bytes memory targetChain = abi.encodePacked(MOONBEAM_CHAIN, receiver);\\n        bytes memory callData = BuildCallData.buildMintWithChannelIdCallBytes(\\n            _msgSender(),\\n            token,\\n            targetChain,\\n            remark,\\n            channel_id\\n        );\\n        // XCM Transact\\n        FeeInfo memory feeInfo = checkFeeInfo(Operation.Mint);\\n        XcmTransactorV2(XCM_TRANSACTORV2_ADDRESS).transactThroughSigned(\\n            xcmTransactorDestination,\\n            BNCAddress,\\n            feeInfo.transactRequiredWeightAtMost,\\n            callData,\\n            feeInfo.feeAmount,\\n            feeInfo.overallWeight\\n        );\\n        emit Mint(\\n            _msgSender(),\\n            assetAddress,\\n            amount,\\n            receiver,\\n            callData,\\n            remark\\n        );\\n    }\\n\\n    function redeemAsset(\\n        address vAssetAddress,\\n        uint256 amount,\\n        address receiver\\n    ) external override whenNotPaused {\\n        bytes2 vtoken = checkAssetIsExist(vAssetAddress);\\n\\n        // xtokens call\\n        xcmTransferAsset(vAssetAddress, amount);\\n\\n        // xcm transactor call\\n        bytes memory targetChain = abi.encodePacked(MOONBEAM_CHAIN, receiver);\\n        bytes memory callData = BuildCallData.buildRedeemCallBytes(\\n            _msgSender(),\\n            vtoken,\\n            targetChain\\n        );\\n        FeeInfo memory feeInfo = checkFeeInfo(Operation.Redeem);\\n        XcmTransactorV2(XCM_TRANSACTORV2_ADDRESS).transactThroughSigned(\\n            xcmTransactorDestination,\\n            BNCAddress,\\n            feeInfo.transactRequiredWeightAtMost,\\n            callData,\\n            feeInfo.feeAmount,\\n            feeInfo.overallWeight\\n        );\\n        emit Redeem(_msgSender(), vAssetAddress, amount, receiver, callData);\\n    }\\n\\n    function getXtokensDestination(\\n        bytes32 publicKey\\n    ) internal view returns (Xtokens.Multilocation memory) {\\n        bytes[] memory interior = new bytes[](2);\\n        // Parachain: 2001/2030\\n        interior[0] = bytes.concat(hex\\\"00\\\", bytes4(bifrostParaId));\\n        // AccountId32: { id: public_key , network: any }\\n        interior[1] = bytes.concat(hex\\\"01\\\", publicKey, hex\\\"00\\\");\\n        Xtokens.Multilocation memory dest = Xtokens.Multilocation({\\n            parents: 1,\\n            interior: interior\\n        });\\n\\n        return dest;\\n    }\\n\\n    function setDestChainInfo(\\n        uint64 dest_chain_id,\\n        bool is_evm,\\n        bool is_substrate,\\n        bytes1 raw_chain_index\\n    ) public onlyOwner {\\n        require(!(is_evm && is_substrate), \\\"Both is_evm and is_substrate cannot be true\\\");\\n        DestChainInfo storage chainInfo = destChainInfo[dest_chain_id];\\n        chainInfo.is_evm = is_evm;\\n        chainInfo.is_substrate = is_substrate;\\n        chainInfo.raw_chain_index = raw_chain_index;\\n    }\\n\\n    /**\\n    * @dev Create order to mint vAsset or redeem vAsset on bifrost chain\\n    * @param assetAddress The address of the asset to mint or redeem\\n    * @param amount The amount of the asset to mint or redeem\\n    * @param dest_chain_id When order is executed, Asset/vAsset will be transferred to this chain\\n    * @param receiver The receiver address on the destination chain, 20 bytes for EVM, 32 bytes for Substrate\\n    * @param remark The remark of the order, less than 32 bytes. For example, \\\"OmniLS\\\"\\n    * @param channel_id The channel id of the order, you can set it. Bifrost chain will use it to share reward.\\n    **/\\n    function create_order(\\n        address assetAddress,\\n        uint128 amount,\\n        uint64 dest_chain_id,\\n        bytes memory receiver,\\n        string memory remark,\\n        uint32 channel_id\\n    ) external override payable {\\n        require(bytes(remark).length > 0 && bytes(remark).length <= 32, \\\"remark must be less than 32 bytes and not empty\\\");\\n        require(amount > 0, \\\"amount must be greater than 0\\\");\\n\\n        DestChainInfo memory chainInfo = destChainInfo[dest_chain_id];\\n        if(chainInfo.is_evm) {\\n            require(receiver.length == 20, \\\"evm address must be 20 bytes\\\");\\n        } else if(chainInfo.is_substrate) {\\n            require(receiver.length == 32, \\\"substrate public key must be 32 bytes\\\");\\n        } else {\\n            revert(\\\"Destination chain is not supported\\\");\\n        }\\n\\n        bytes2 token = checkAssetIsExist(assetAddress);\\n\\n        // Transfer asset to bifrost chain\\n        if (assetAddress == NATIVE_ASSET_ADDRESS) {\\n            amount = uint128(msg.value);\\n            xcmTransferNativeAsset(uint256(amount));\\n        } else {\\n            xcmTransferAsset(assetAddress, uint256(amount));\\n        }\\n\\n        // Build bifrost slpx create order call data\\n        bytes memory callData = BuildCallData.buildCreateOrderCallBytes(\\n            _msgSender(),\\n            block.chainid,\\n            block.number,\\n            token,\\n            amount,\\n            abi.encodePacked(chainInfo.raw_chain_index, receiver),\\n            remark,\\n            channel_id\\n        );\\n        // XCM Transact\\n        FeeInfo memory feeInfo = checkFeeInfo(Operation.Mint);\\n        XcmTransactorV2(XCM_TRANSACTORV2_ADDRESS).transactThroughSigned(\\n            xcmTransactorDestination,\\n            BNCAddress,\\n            feeInfo.transactRequiredWeightAtMost,\\n            callData,\\n            feeInfo.feeAmount,\\n            feeInfo.overallWeight\\n        );\\n        emit CreateOrder(\\n            assetAddress,\\n            amount,\\n            dest_chain_id,\\n            receiver,\\n            remark,\\n            channel_id\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x1e6f2de1831d8505f625d6f546549f57a18d7cc737a7cf311ab5668a03692962\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/ICommonOFT.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface of the IOFT core standard\\n */\\ninterface ICommonOFT is IERC165 {\\n    struct LzCallParams {\\n        address payable refundAddress;\\n        address zroPaymentAddress;\\n        bytes adapterParams;\\n    }\\n\\n    /**\\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\\n     * _dstChainId - L0 defined chain id to send tokens too\\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\\n     * _amount - amount of the tokens to transfer\\n     * _useZro - indicates to use zro to pay L0 fees\\n     * _adapterParam - flexible bytes array to indicate messaging adapter services in L0\\n     */\\n    function estimateSendFee(\\n        uint16 _dstChainId,\\n        bytes32 _toAddress,\\n        uint _amount,\\n        bool _useZro,\\n        bytes calldata _adapterParams\\n    ) external view returns (uint nativeFee, uint zroFee);\\n\\n    function estimateSendAndCallFee(\\n        uint16 _dstChainId,\\n        bytes32 _toAddress,\\n        uint _amount,\\n        bytes calldata _payload,\\n        uint64 _dstGasForCall,\\n        bool _useZro,\\n        bytes calldata _adapterParams\\n    ) external view returns (uint nativeFee, uint zroFee);\\n\\n    /**\\n     * @dev returns the circulating amount of tokens on current chain\\n     */\\n    function circulatingSupply() external view returns (uint);\\n\\n    /**\\n     * @dev returns the address of the ERC20 token\\n     */\\n    function token() external view returns (address);\\n}\\n\",\"keccak256\":\"0x685586b87541a45bf6b634ef5e356a8968b3c23b33e929dec1807614db26cd6a\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IOFTReceiverV2.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\ninterface IOFTReceiverV2 {\\n    /**\\n     * @dev Called by the OFT contract when tokens are received from source chain.\\n     * @param _srcChainId The chain id of the source chain.\\n     * @param _srcAddress The address of the OFT token contract on the source chain.\\n     * @param _nonce The nonce of the transaction on the source chain.\\n     * @param _from The address of the account who calls the sendAndCall() on the source chain.\\n     * @param _amount The amount of tokens to transfer.\\n     * @param _payload Additional data with no specified format.\\n     */\\n    function onOFTReceived(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes32 _from,\\n        uint _amount,\\n        bytes calldata _payload\\n    ) external;\\n}\\n\",\"keccak256\":\"0x79f5295d7c8729de73e196d3ffd5e7f5ad22f4b2cdf9f239419c0eb6fbb4816a\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IOFTV2.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\nimport \\\"./ICommonOFT.sol\\\";\\n\\n/**\\n * @dev Interface of the IOFT core standard\\n */\\ninterface IOFTV2 is ICommonOFT {\\n    /**\\n     * @dev send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from`\\n     * `_from` the owner of token\\n     * `_dstChainId` the destination chain identifier\\n     * `_toAddress` can be any size depending on the `dstChainId`.\\n     * `_amount` the quantity of tokens in wei\\n     * `_refundAddress` the address LayerZero refunds if too much message fee is sent\\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\\n     */\\n    function sendFrom(\\n        address _from,\\n        uint16 _dstChainId,\\n        bytes32 _toAddress,\\n        uint _amount,\\n        LzCallParams calldata _callParams\\n    ) external payable;\\n\\n    function sendAndCall(\\n        address _from,\\n        uint16 _dstChainId,\\n        bytes32 _toAddress,\\n        uint _amount,\\n        bytes calldata _payload,\\n        uint64 _dstGasForCall,\\n        LzCallParams calldata _callParams\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xd585b8f5c6b3569cd2d5d5d04345f17e9bf0d3f4ea4d0831cb4da6129629a555\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/ISlpx.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\ninterface ISlpx {\\n    event Mint(\\n        address minter,\\n        address assetAddress,\\n        uint256 amount,\\n        address receiver,\\n        bytes callcode,\\n        string remark\\n    );\\n    event Redeem(\\n        address redeemer,\\n        address assetAddress,\\n        uint256 amount,\\n        address receiver,\\n        bytes callcode\\n    );\\n    event CreateOrder(\\n        address assetAddress,\\n        uint128 amount,\\n        uint64 dest_chain_id,\\n        bytes receiver,\\n        string remark,\\n        uint32 channel_id\\n    );\\n\\n    /// Minted vNative assets such as vASTR, vGLMR, vMOVR\\n    function mintVNativeAsset(\\n        address receiver,\\n        string memory remark\\n    ) external payable;\\n\\n    /// Minted vAssets\\n    function mintVAsset(\\n        address assetAddress,\\n        uint256 amount,\\n        address receiver,\\n        string memory remark\\n    ) external;\\n\\n    /// Minted vNative assets such as vASTR, vGLMR, vMOVR\\n    function mintVNativeAssetWithChannelId(\\n        address receiver,\\n        string memory remark,\\n        uint32 channel_id\\n    ) external payable;\\n\\n    /// Minted vAssets\\n    function mintVAssetWithChannelId(\\n        address assetAddress,\\n        uint256 amount,\\n        address receiver,\\n        string memory remark,\\n        uint32 channel_id\\n    ) external;\\n\\n    /// Redeem assets\\n    function redeemAsset(\\n        address vAssetAddress,\\n        uint256 amount,\\n        address receiver\\n    ) external;\\n\\n    /**\\n     * @dev Create order to mint vAsset or redeem vAsset on bifrost chain\\n     * @param assetAddress The address of the asset to mint or redeem\\n     * @param amount The amount of the asset to mint or redeem\\n     * @param dest_chain_id When order is executed on Bifrost, Asset/vAsset will be transferred to this chain\\n     * @param receiver The receiver address on the destination chain, 20 bytes for EVM, 32 bytes for Substrate\\n     * @param remark The remark of the order, less than 32 bytes. For example, \\\"OmniLS\\\"\\n     * @param channel_id The channel id of the order, you can set it. Bifrost chain will use it to share reward.\\n     **/\\n    function create_order(\\n        address assetAddress,\\n        uint128 amount,\\n        uint64 dest_chain_id,\\n        bytes memory receiver,\\n        string memory remark,\\n        uint32 channel_id\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x17808b1bf1b68012d4b11420c2394874f7bb900070c4d6459a9c00a3b055921f\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/XcmTransactorV2.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\n/// @dev The XcmTransactorV2 contract's address.\\naddress constant XCM_TRANSACTOR_V2_ADDRESS = 0x000000000000000000000000000000000000080D;\\n\\n/// @dev The XcmTransactorV2 contract's instance.\\nXcmTransactorV2 constant XCM_TRANSACTOR_V2_CONTRACT = XcmTransactorV2(\\n    XCM_TRANSACTOR_V2_ADDRESS\\n);\\n\\n/// @author The Moonbeam Team\\n/// @title Xcm Transactor Interface\\n/// The interface through which solidity contracts will interact with xcm transactor pallet\\n/// @custom:address 0x000000000000000000000000000000000000080D\\ninterface XcmTransactorV2 {\\n    // A multilocation is defined by its number of parents and the encoded junctions (interior)\\n    struct Multilocation {\\n        uint8 parents;\\n        bytes[] interior;\\n    }\\n\\n    /// Get index of an account in xcm transactor\\n    /// @custom:selector 3fdc4f36\\n    /// @param index The index of which we want to retrieve the account\\n    /// @return owner The owner of the derivative index\\n    ///\\n    function indexToAccount(uint16 index) external view returns (address owner);\\n\\n    /// Get transact info of a multilocation\\n    /// @custom:selector b689e20c\\n    /// @param multilocation The location for which we want to know the transact info\\n    /// @return transactExtraWeight The extra weight involved in the XCM message of using derivative\\n    /// @return transactExtraWeightSigned The extra weight involved in the XCM message of using signed\\n    /// @return maxWeight Maximum allowed weight for a single message in dest\\n    ///\\n    function transactInfoWithSigned(\\n        Multilocation memory multilocation\\n    )\\n        external\\n        view\\n        returns (\\n            uint64 transactExtraWeight,\\n            uint64 transactExtraWeightSigned,\\n            uint64 maxWeight\\n        );\\n\\n    /// Get fee per second charged in its reserve chain for an asset\\n    /// @custom:selector 906c9990\\n    /// @param multilocation The asset location for which we want to know the fee per second value\\n    /// @return feePerSecond The fee per second that the reserve chain charges for this asset\\n    ///\\n    function feePerSecond(\\n        Multilocation memory multilocation\\n    ) external view returns (uint256 feePerSecond);\\n\\n    /// Transact through XCM using fee based on its multilocation\\n    /// @custom:selector fe430475\\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\\n    /// @param transactor The transactor to be used\\n    /// @param index The index to be used\\n    /// @param feeAsset The asset in which we want to pay fees.\\n    /// It has to be a reserve of the destination chain\\n    /// @param transactRequiredWeightAtMost The weight we want to buy in the destination chain\\n    /// @param innerCall The inner call to be executed in the destination chain\\n    /// @param feeAmount Amount to be used as fee.\\n    /// @param overallWeight Overall weight to be used for the xcm message.\\n    ///\\n    function transactThroughDerivativeMultilocation(\\n        uint8 transactor,\\n        uint16 index,\\n        Multilocation memory feeAsset,\\n        uint64 transactRequiredWeightAtMost,\\n        bytes memory innerCall,\\n        uint256 feeAmount,\\n        uint64 overallWeight\\n    ) external;\\n\\n    /// Transact through XCM using fee based on its currency_id\\n    /// @custom:selector 185de2ae\\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\\n    /// @param transactor The transactor to be used\\n    /// @param index The index to be used\\n    /// @param currencyId Address of the currencyId of the asset to be used for fees\\n    /// It has to be a reserve of the destination chain\\n    /// @param transactRequiredWeightAtMost The weight we want to buy in the destination chain\\n    /// @param innerCall The inner call to be executed in the destination chain\\n    /// @param feeAmount Amount to be used as fee.\\n    /// @param overallWeight Overall weight to be used for the xcm message.\\n    function transactThroughDerivative(\\n        uint8 transactor,\\n        uint16 index,\\n        address currencyId,\\n        uint64 transactRequiredWeightAtMost,\\n        bytes memory innerCall,\\n        uint256 feeAmount,\\n        uint64 overallWeight\\n    ) external;\\n\\n    /// Transact through XCM using fee based on its multilocation through signed origins\\n    /// @custom:selector d7ab340c\\n    /// @dev No token is burnt before sending the message. The caller must ensure the destination\\n    /// is able to undertand the DescendOrigin message, and create a unique account from which\\n    /// dispatch the call\\n    /// @param dest The destination chain (as multilocation) where to send the message\\n    /// @param feeLocation The asset multilocation that indentifies the fee payment currency\\n    /// It has to be a reserve of the destination chain\\n    /// @param transactRequiredWeightAtMost The weight we want to buy in the destination chain for the call to be made\\n    /// @param call The call to be executed in the destination chain\\n    /// @param feeAmount Amount to be used as fee.\\n    /// @param overallWeight Overall weight to be used for the xcm message.\\n    function transactThroughSignedMultilocation(\\n        Multilocation memory dest,\\n        Multilocation memory feeLocation,\\n        uint64 transactRequiredWeightAtMost,\\n        bytes memory call,\\n        uint256 feeAmount,\\n        uint64 overallWeight\\n    ) external;\\n\\n    /// Transact through XCM using fee based on its erc20 address through signed origins\\n    /// @custom:selector b648f3fe\\n    /// @dev No token is burnt before sending the message. The caller must ensure the destination\\n    /// is able to undertand the DescendOrigin message, and create a unique account from which\\n    /// dispatch the call\\n    /// @param dest The destination chain (as multilocation) where to send the message\\n    /// @param feeLocationAddress The ERC20 address of the token we want to use to pay for fees\\n    /// only callable if such an asset has been BRIDGED to our chain\\n    /// @param transactRequiredWeightAtMost The weight we want to buy in the destination chain for the call to be made\\n    /// @param call The call to be executed in the destination chain\\n    /// @param feeAmount Amount to be used as fee.\\n    /// @param overallWeight Overall weight to be used for the xcm message.\\n    function transactThroughSigned(\\n        Multilocation memory dest,\\n        address feeLocationAddress,\\n        uint64 transactRequiredWeightAtMost,\\n        bytes memory call,\\n        uint256 feeAmount,\\n        uint64 overallWeight\\n    ) external;\\n}\\n\",\"keccak256\":\"0xb92f4611172a662795c62e46049e8a99c032dfc8bfbf65307e3de9a9141d48e4\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/Xtokens.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\n/// @dev The Xtokens contract's address.\\naddress constant XTOKENS_ADDRESS = 0x0000000000000000000000000000000000000804;\\n\\n/// @dev The Xtokens contract's instance.\\nXtokens constant XTOKENS_CONTRACT = Xtokens(XTOKENS_ADDRESS);\\n\\n/// @author The Moonbeam Team\\n/// @title Xtokens Interface\\n/// @dev The interface through which solidity contracts will interact with xtokens pallet\\n/// @custom:address 0x0000000000000000000000000000000000000804\\ninterface Xtokens {\\n    // A multilocation is defined by its number of parents and the encoded junctions (interior)\\n    struct Multilocation {\\n        uint8 parents;\\n        bytes[] interior;\\n    }\\n\\n    // A MultiAsset is defined by a multilocation and an amount\\n    struct MultiAsset {\\n        Multilocation location;\\n        uint256 amount;\\n    }\\n\\n    // A Currency is defined by address and the amount to be transferred\\n    struct Currency {\\n        address currencyAddress;\\n        uint256 amount;\\n    }\\n\\n    /// Transfer a token through XCM based on its currencyId\\n    ///\\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\\n    /// @param currencyAddress The ERC20 address of the currency we want to transfer\\n    /// @param amount The amount of tokens we want to transfer\\n    /// @param destination The Multilocation to which we want to send the tokens\\n    /// @param destination The weight we want to buy in the destination chain\\n    /// @custom:selector b9f813ff\\n    function transfer(\\n        address currencyAddress,\\n        uint256 amount,\\n        Multilocation memory destination,\\n        uint64 weight\\n    ) external;\\n\\n    /// Transfer a token through XCM based on its currencyId specifying fee\\n    ///\\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\\n    /// @param currencyAddress The ERC20 address of the currency we want to transfer\\n    /// @param amount The amount of tokens we want to transfer\\n    /// @param destination The Multilocation to which we want to send the tokens\\n    /// @param destination The weight we want to buy in the destination chain\\n    /// @custom:selector 3e506ef0\\n    function transferWithFee(\\n        address currencyAddress,\\n        uint256 amount,\\n        uint256 fee,\\n        Multilocation memory destination,\\n        uint64 weight\\n    ) external;\\n\\n    /// Transfer a token through XCM based on its MultiLocation\\n    ///\\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\\n    /// @param asset The asset we want to transfer, defined by its multilocation.\\n    /// Currently only Concrete Fungible assets\\n    /// @param amount The amount of tokens we want to transfer\\n    /// @param destination The Multilocation to which we want to send the tokens\\n    /// @param destination The weight we want to buy in the destination chain\\n    /// @custom:selector b4f76f96\\n    function transferMultiasset(\\n        Multilocation memory asset,\\n        uint256 amount,\\n        Multilocation memory destination,\\n        uint64 weight\\n    ) external;\\n\\n    /// Transfer a token through XCM based on its MultiLocation specifying fee\\n    ///\\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\\n    /// @param asset The asset we want to transfer, defined by its multilocation.\\n    /// Currently only Concrete Fungible assets\\n    /// @param amount The amount of tokens we want to transfer\\n    /// @param destination The Multilocation to which we want to send the tokens\\n    /// @param destination The weight we want to buy in the destination chain\\n    /// @custom:selector 150c016a\\n    function transferMultiassetWithFee(\\n        Multilocation memory asset,\\n        uint256 amount,\\n        uint256 fee,\\n        Multilocation memory destination,\\n        uint64 weight\\n    ) external;\\n\\n    /// Transfer several tokens at once through XCM based on its address specifying fee\\n    ///\\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\\n    /// @param currencies The currencies we want to transfer, defined by their address and amount.\\n    /// @param feeItem Which of the currencies to be used as fee\\n    /// @param destination The Multilocation to which we want to send the tokens\\n    /// @param weight The weight we want to buy in the destination chain\\n    /// @custom:selector ab946323\\n    function transferMultiCurrencies(\\n        Currency[] memory currencies,\\n        uint32 feeItem,\\n        Multilocation memory destination,\\n        uint64 weight\\n    ) external;\\n\\n    /// Transfer several tokens at once through XCM based on its location specifying fee\\n    ///\\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\\n    /// @param assets The assets we want to transfer, defined by their location and amount.\\n    /// @param feeItem Which of the currencies to be used as fee\\n    /// @param destination The Multilocation to which we want to send the tokens\\n    /// @param weight The weight we want to buy in the destination chain\\n    /// @custom:selector 797b45fd\\n    function transferMultiAssets(\\n        MultiAsset[] memory assets,\\n        uint32 feeItem,\\n        Multilocation memory destination,\\n        uint64 weight\\n    ) external;\\n}\\n\",\"keccak256\":\"0x84818cdfbb1b9d94e2ce93443028383d2e7e560ab4716f1c127a1278cf07e50c\",\"license\":\"Apache-2.0\"},\"contracts/utils/AddressToAccount.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\nimport \\\"./Blake2b.sol\\\";\\n\\nlibrary AddressToAccount {\\n    using Blake2b for Blake2b.Instance;\\n\\n    function blake2bHash(bytes memory src) public view returns (bytes32 des) {\\n        Blake2b.Instance memory instance = Blake2b.init(hex\\\"\\\", 32);\\n        return abi.decode(instance.finalize(src), (bytes32));\\n    }\\n\\n    function AddressToSubstrateAccount(\\n        address addr\\n    ) public view returns (bytes32 account) {\\n        bytes memory prefix = bytes(\\\"evm:\\\");\\n        bytes memory addrBytes = abi.encodePacked(addr);\\n        bytes memory data = abi.encodePacked(prefix, addrBytes);\\n        return blake2bHash(data);\\n    }\\n}\\n\",\"keccak256\":\"0x2a5dd8e6b32dfaf911e5d1b26a25dae4d489b4e16052659077f9f59d34da9ad2\",\"license\":\"Apache-2.0\"},\"contracts/utils/Blake2b.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\nlibrary Blake2b {\\n    struct Instance {\\n        // This is a bit misleadingly called state as it not only includes the Blake2 state,\\n        // but every field needed for the \\\"blake2 f function precompile\\\".\\n        //\\n        // This is a tightly packed buffer of:\\n        // - rounds: 32-bit BE\\n        // - h: 8 x 64-bit LE\\n        // - m: 16 x 64-bit LE\\n        // - t: 2 x 64-bit LE\\n        // - f: 8-bit\\n        bytes state;\\n        // Expected output hash length. (Used in `finalize`.)\\n        uint out_len;\\n        // Data passed to \\\"function F\\\".\\n        // NOTE: this is limited to 24 bits.\\n        uint input_counter;\\n    }\\n\\n    // Initialise the state with a given `key` and required `out_len` hash length.\\n    function init(\\n        bytes memory key,\\n        uint out_len\\n    ) internal view returns (Instance memory instance) {\\n        require(key.length == 0, \\\"Invalid key\\\");\\n        require(out_len == 32, \\\"Invalid out_len\\\");\\n        reset(instance, key, out_len);\\n    }\\n\\n    // Initialise the state with a given `key` and required `out_len` hash length.\\n    function reset(\\n        Instance memory instance,\\n        bytes memory key,\\n        uint out_len\\n    ) internal view {\\n        instance.out_len = out_len;\\n        instance.input_counter = 0;\\n\\n        // This is entire state transmitted to the precompile.\\n        // It is byteswapped for the encoding requirements, additionally\\n        // the IV has the initial parameter block 0 XOR constant applied, but\\n        // not the key and output length.\\n        instance\\n            .state = hex\\\"0000000c08c9bdf267e6096a3ba7ca8485ae67bb2bf894fe72f36e3cf1361d5f3af54fa5d182e6ad7f520e511f6c3e2b8c68059b6bbd41fbabd9831f79217e1319cde05b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\\";\\n        bytes memory state = instance.state;\\n\\n        // Update parameter block 0 with key length and output length.\\n        uint key_len = key.length;\\n        assembly {\\n            let ptr := add(state, 36)\\n            let tmp := mload(ptr)\\n            let p0 := or(shl(240, key_len), shl(248, out_len))\\n            tmp := xor(tmp, p0)\\n            mstore(ptr, tmp)\\n        }\\n\\n        // TODO: support salt and personalization\\n\\n        if (key_len > 0) {\\n            require(key_len == 64);\\n            // FIXME: the key must be zero padded\\n            assert(key.length == 128);\\n            update(instance, key, key_len);\\n        }\\n    }\\n\\n    // This calls the blake2 precompile (\\\"function F of the spec\\\").\\n    // It expects the state was updated with the next block. Upon returning the state will be updated,\\n    // but the supplied block data will not be cleared.\\n    function call_function_f(Instance memory instance) private view {\\n        bytes memory state = instance.state;\\n        assembly {\\n            let state_ptr := add(state, 32)\\n            if iszero(\\n                staticcall(\\n                    not(0),\\n                    0x09,\\n                    state_ptr,\\n                    0xd5,\\n                    add(state_ptr, 4),\\n                    0x40\\n                )\\n            ) {\\n                revert(0, 0)\\n            }\\n        }\\n    }\\n\\n    // This function will split blocks correctly and repeatedly call the precompile.\\n    // NOTE: this is dumb right now and expects `data` to be 128 bytes long and padded with zeroes,\\n    //       hence the real length is indicated with `data_len`\\n    function update_loop(\\n        Instance memory instance,\\n        bytes memory data,\\n        uint data_len,\\n        bool last_block\\n    ) private view {\\n        bytes memory state = instance.state;\\n        uint input_counter = instance.input_counter;\\n\\n        // This is the memory location where the \\\"data block\\\" starts for the precompile.\\n        uint state_ptr;\\n        assembly {\\n            // The `rounds` field is 4 bytes long and the `h` field is 64-bytes long.\\n            // Also adjust for the size of the bytes type.\\n            state_ptr := add(state, 100)\\n        }\\n\\n        // This is the memory location where the input data resides.\\n        uint data_ptr;\\n        assembly {\\n            data_ptr := add(data, 32)\\n        }\\n\\n        uint len = data.length;\\n        while (len > 0) {\\n            if (len >= 128) {\\n                assembly {\\n                    mstore(state_ptr, mload(data_ptr))\\n                    data_ptr := add(data_ptr, 32)\\n\\n                    mstore(add(state_ptr, 32), mload(data_ptr))\\n                    data_ptr := add(data_ptr, 32)\\n\\n                    mstore(add(state_ptr, 64), mload(data_ptr))\\n                    data_ptr := add(data_ptr, 32)\\n\\n                    mstore(add(state_ptr, 96), mload(data_ptr))\\n                    data_ptr := add(data_ptr, 32)\\n                }\\n\\n                len -= 128;\\n                // FIXME: remove this once implemented proper padding\\n                if (data_len < 128) {\\n                    input_counter += data_len;\\n                } else {\\n                    data_len -= 128;\\n                    input_counter += 128;\\n                }\\n            } else {\\n                // FIXME: implement support for smaller than 128 byte blocks\\n                revert();\\n            }\\n\\n            // Set length field (little-endian) for maximum of 24-bits.\\n            assembly {\\n                mstore8(add(state, 228), and(input_counter, 0xff))\\n                mstore8(add(state, 229), and(shr(8, input_counter), 0xff))\\n                mstore8(add(state, 230), and(shr(16, input_counter), 0xff))\\n            }\\n\\n            // Set the last block indicator.\\n            // Only if we've processed all input.\\n            if (len == 0) {\\n                assembly {\\n                    // Writing byte 212 here.\\n                    mstore8(add(state, 244), last_block)\\n                }\\n            }\\n\\n            // Call the precompile\\n            call_function_f(instance);\\n        }\\n\\n        instance.input_counter = input_counter;\\n    }\\n\\n    // Update the state with a non-final block.\\n    // NOTE: the input must be complete blocks.\\n    function update(\\n        Instance memory instance,\\n        bytes memory data,\\n        uint data_len\\n    ) internal view {\\n        require((data.length % 128) == 0);\\n        update_loop(instance, data, data_len, false);\\n    }\\n\\n    // Update the state with a final block and return the hash.\\n    function finalize(\\n        Instance memory instance,\\n        bytes memory data\\n    ) internal view returns (bytes memory output) {\\n        // FIXME: support incomplete blocks (zero pad them)\\n        uint input_length = data.length;\\n        if (input_length == 0 || (input_length % 128) != 0) {\\n            data = abi.encodePacked(\\n                data,\\n                new bytes(128 - (input_length % 128))\\n            );\\n        }\\n        assert((data.length % 128) == 0);\\n        update_loop(instance, data, input_length, true);\\n\\n        // FIXME: support other lengths\\n        // assert(instance.out_len == 64);\\n\\n        bytes memory state = instance.state;\\n        output = new bytes(instance.out_len);\\n        if (instance.out_len == 16) {\\n            assembly {\\n                mstore(add(output, 16), mload(add(state, 20)))\\n                mstore(output, 16)\\n            }\\n        } else if (instance.out_len == 32) {\\n            assembly {\\n                mstore(add(output, 32), mload(add(state, 36)))\\n            }\\n        } else {\\n            assembly {\\n                mstore(add(output, 32), mload(add(state, 36)))\\n                mstore(add(output, 64), mload(add(state, 68)))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x196399822da1125151480ae7b85587fae83c6a59e81d6673eb68465e7a4d9304\",\"license\":\"Apache-2.0\"},\"contracts/utils/BuildCallData.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\nlibrary BuildCallData {\\n    uint8 public constant PALLET_INDEX = 125;\\n    uint8 public constant MINT_CALL_INDEX = 0;\\n    uint8 public constant SWAP_CALL_INDEX = 1;\\n    uint8 public constant REDEEM_CALL_INDEX = 2;\\n    uint8 public constant STABLE_POOL_SWAP_CALL_INDEX = 3;\\n    uint8 public constant MINT_WITH_CHANNEL_ID_CALL_INDEX = 13;\\n    uint8 public constant CREATE_ORDER_CALL_INDEX = 14;\\n\\n    function buildMintCallBytes(\\n        address caller,\\n        bytes2 token,\\n        bytes memory targetChain,\\n        string memory remark\\n    ) public pure returns (bytes memory) {\\n        bytes memory prefix = new bytes(2);\\n        // storage pallet index\\n        prefix[0] = bytes1(PALLET_INDEX);\\n        // storage call index\\n        prefix[1] = bytes1(MINT_CALL_INDEX);\\n\\n        // astar target_chain = bytes1(0)\\n        return\\n            bytes.concat(\\n                prefix,\\n                abi.encodePacked(caller),\\n                token,\\n                targetChain,\\n                toScaleString(remark)\\n            );\\n    }\\n\\n    function buildMintWithChannelIdCallBytes(\\n        address caller,\\n        bytes2 token,\\n        bytes memory targetChain,\\n        string memory remark,\\n        uint32 channel_id\\n    ) public pure returns (bytes memory) {\\n        bytes memory prefix = new bytes(2);\\n        // storage pallet index\\n        prefix[0] = bytes1(PALLET_INDEX);\\n        // storage call index\\n        prefix[1] = bytes1(MINT_WITH_CHANNEL_ID_CALL_INDEX);\\n\\n        // astar target_chain = bytes1(0)\\n        return\\n            bytes.concat(\\n                prefix,\\n                abi.encodePacked(caller),\\n                token,\\n                targetChain,\\n                toScaleString(remark),\\n                encode_uint32(channel_id)\\n            );\\n    }\\n\\n    function buildCreateOrderCallBytes(\\n        address caller,\\n        uint256 chain_id,\\n        uint256 block_number,\\n        bytes2 token,\\n        uint128 amount,\\n        bytes memory targetChain,\\n        string memory remark,\\n        uint32 channel_id\\n    ) public pure returns (bytes memory) {\\n        bytes memory prefix = new bytes(2);\\n        // storage pallet index\\n        prefix[0] = bytes1(PALLET_INDEX);\\n        // storage call index\\n        prefix[1] = bytes1(CREATE_ORDER_CALL_INDEX);\\n\\n        return\\n            bytes.concat(\\n                prefix,\\n                abi.encodePacked(caller),\\n                encode_uint64(uint64(chain_id)),\\n                encode_uint128(uint128(block_number)),\\n                token,\\n                encode_uint128(amount),\\n                targetChain,\\n                toScaleString(remark),\\n                encode_uint32(channel_id)\\n            );\\n    }\\n\\n    function buildSwapCallBytes(\\n        address caller,\\n        bytes2 currency_in,\\n        bytes2 currency_out,\\n        uint128 currency_out_min,\\n        bytes memory targetChain\\n    ) public pure returns (bytes memory) {\\n        bytes memory prefix = new bytes(2);\\n        // storage pallet index\\n        prefix[0] = bytes1(PALLET_INDEX);\\n        // storage call index\\n        prefix[1] = bytes1(SWAP_CALL_INDEX);\\n\\n        // astar target_chain = bytes1(0)\\n        return\\n            bytes.concat(\\n                prefix,\\n                abi.encodePacked(caller),\\n                currency_in,\\n                currency_out,\\n                encode_uint128(currency_out_min),\\n                targetChain\\n            );\\n    }\\n\\n    function buildStablePoolSwapCallBytes(\\n        address caller,\\n        uint32 pool_id,\\n        bytes2 currency_in,\\n        bytes2 currency_out,\\n        uint128 min_dy,\\n        bytes memory targetChain\\n    ) public pure returns (bytes memory) {\\n        bytes memory prefix = new bytes(2);\\n        // storage pallet index\\n        prefix[0] = bytes1(PALLET_INDEX);\\n        // storage call index\\n        prefix[1] = bytes1(STABLE_POOL_SWAP_CALL_INDEX);\\n\\n        // astar target_chain = bytes1(0)\\n        return\\n            bytes.concat(\\n                prefix,\\n                abi.encodePacked(caller),\\n                encode_uint32(pool_id),\\n                currency_in,\\n                currency_out,\\n                encode_uint128(min_dy),\\n                targetChain\\n            );\\n    }\\n\\n    function buildRedeemCallBytes(\\n        address caller,\\n        bytes2 vtoken,\\n        bytes memory targetChain\\n    ) public pure returns (bytes memory) {\\n        bytes memory prefix = new bytes(2);\\n        // storage pallet index\\n        prefix[0] = bytes1(PALLET_INDEX);\\n        // storage call index\\n        prefix[1] = bytes1(REDEEM_CALL_INDEX);\\n\\n        // astar target_chain = bytes1(0)\\n        return\\n            bytes.concat(prefix, abi.encodePacked(caller), vtoken, targetChain);\\n    }\\n\\n    //https://docs.substrate.io/reference/scale-codec/\\n    function encode_uint128(uint128 x) internal pure returns (bytes memory) {\\n        bytes memory b = new bytes(16);\\n        for (uint i = 0; i < 16; i++) {\\n            b[i] = bytes1(uint8(x / (2 ** (8 * i))));\\n        }\\n        return b;\\n    }\\n\\n    //https://docs.substrate.io/reference/scale-codec/\\n    function encode_uint64(uint64 x) internal pure returns (bytes memory) {\\n        bytes memory b = new bytes(8);\\n        for (uint i = 0; i < 8; i++) {\\n            b[i] = bytes1(uint8(x / (2 ** (8 * i))));\\n        }\\n        return b;\\n    }\\n\\n    //https://docs.substrate.io/reference/scale-codec/\\n    function encode_uint32(uint32 x) internal pure returns (bytes memory) {\\n        bytes memory b = new bytes(4);\\n        for (uint i = 0; i < 4; i++) {\\n            b[i] = bytes1(uint8(x / (2 ** (8 * i))));\\n        }\\n        return b;\\n    }\\n\\n    //https://docs.substrate.io/reference/scale-codec/\\n    function toTruncBytes(uint64 x) internal pure returns (bytes memory) {\\n        bytes memory b = new bytes(8);\\n        uint len = 0;\\n        for (uint i = 0; i < 8; i++) {\\n            uint8 temp = uint8(x / (2 ** (8 * i)));\\n            if (temp != 0) {\\n                b[i] = bytes1(temp);\\n            } else {\\n                len = i;\\n                break;\\n            }\\n        }\\n        bytes memory rst = new bytes(len);\\n        for (uint i = 0; i < len; i++) {\\n            rst[i] = b[i];\\n        }\\n        return rst;\\n    }\\n\\n    // Convert an hexadecimal character to their value\\n    function fromScaleChar(uint8 c) internal pure returns (uint8) {\\n        if (bytes1(c) >= bytes1(\\\"0\\\") && bytes1(c) <= bytes1(\\\"9\\\")) {\\n            return 48 + c - uint8(bytes1(\\\"0\\\"));\\n        }\\n        if (bytes1(c) >= bytes1(\\\"a\\\") && bytes1(c) <= bytes1(\\\"z\\\")) {\\n            return 97 + c - uint8(bytes1(\\\"a\\\"));\\n        }\\n        if (bytes1(c) >= bytes1(\\\"A\\\") && bytes1(c) <= bytes1(\\\"Z\\\")) {\\n            return 65 + c - uint8(bytes1(\\\"A\\\"));\\n        }\\n        revert(\\\"fail\\\");\\n    }\\n\\n    // encode the string to bytes\\n    // following the scale format\\n    // format: len + content\\n    // a-z: 61->87\\n    // A-Z: 41->57\\n    // 0-9: 30->40\\n    function toScaleString(\\n        string memory s\\n    ) internal pure returns (bytes memory) {\\n        bytes memory ss = bytes(s);\\n        bytes memory len = toTruncBytes(uint64(ss.length * 4));\\n        bytes memory content = new bytes(ss.length);\\n        for (uint i = 0; i < ss.length; ++i) {\\n            content[i] = bytes1(fromScaleChar(uint8(ss[i])));\\n        }\\n        bytes memory rst = bytes.concat(len, content);\\n        return rst;\\n    }\\n}\\n\",\"keccak256\":\"0x48f91ab5399c7595ea60d0446f55c81f0f1089779cdc7133c8a10a3491798270\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6126998061007e6000396000f3fe60806040526004361061012a5760003560e01c8063a7fd9c6b116100ab578063c24133971161006f578063c241339714610339578063c4af1c0b14610359578063f012945314610381578063f17e1d3d146103a9578063f29588c7146103d1578063f2fde38b146103f957600080fd5b8063a7fd9c6b1461028c578063a97d9f44146102c2578063ae83f844146102e6578063afd6aab714610306578063c0afb3f41461031957600080fd5b80635d76da01116100f25780635d76da01146101e9578063715018a6146102115780637fcf35da146102265780638da5cb5b14610246578063a6a6e9261461026457600080fd5b80630d1bf91f1461012f57806325a2236714610174578063357ba05f14610189578063525560ed146101a95780635d741b09146101c9575b600080fd5b34801561013b57600080fd5b5061015773debbb9309d95dabbfb82411a9c6daa3909b164a481565b6040516001600160a01b0390911681526020015b60405180910390f35b610187610182366004611a46565b610419565b005b34801561019557600080fd5b506101876101a4366004611a9b565b610804565b3480156101b557600080fd5b50600154610157906001600160a01b031681565b3480156101d557600080fd5b50600354610157906001600160a01b031681565b3480156101f557600080fd5b5061015773f1d4797e51a4640a76769a50b57abe7479add3d881565b34801561021d57600080fd5b5061018761087c565b34801561023257600080fd5b50610187610241366004611ace565b610890565b34801561025257600080fd5b506000546001600160a01b0316610157565b34801561027057600080fd5b5061015773ffffffffda2a05fb50e7ae99275f4341aed4337981565b34801561029857600080fd5b506101576102a7366004611a9b565b6004602052600090815260409020546001600160a01b031681565b3480156102ce57600080fd5b506102d860025481565b60405190815260200161016b565b3480156102f257600080fd5b50610187610301366004611b7f565b610cdf565b610187610314366004611a46565b610d52565b34801561032557600080fd5b50610187610334366004611a9b565b6110f8565b34801561034557600080fd5b50610187610354366004611a9b565b611178565b34801561036557600080fd5b5061036e60d981565b60405161ffff909116815260200161016b565b34801561038d57600080fd5b506101577317313ce6e47d796e61fdeac34ab1f58e3e08908281565b3480156103b557600080fd5b5061015773ffffffff7d3875460d4509eb8d0362c611b4e84181565b3480156103dd57600080fd5b5061015773ffffffff7cc06abdf7201b350a1265c62c8601d281565b34801561040557600080fd5b50610187610414366004611a9b565b61127d565b6003546001600160a01b0316336001600160a01b0316146104555760405162461bcd60e51b815260040161044c90611b98565b60405180910390fd5b6001600160a01b03808416600090815260046020526040902054168061048d5760405162461bcd60e51b815260040161044c90611bc7565b6040516308aea7fd60e41b815273ffffffffda2a05fb50e7ae99275f4341aed4337960048201526000906001600160a01b03831690638aea7fd0906024016020604051808303816000875af11580156104ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050e9190611bf0565b60405163095ea7b360e01b815273debbb9309d95dabbfb82411a9c6daa3909b164a460048201526024810182905290915073ffffffffda2a05fb50e7ae99275f4341aed433799063095ea7b3906044016020604051808303816000875af115801561057d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a19190611c09565b50600060405180606001604052806105b63390565b6001600160a01b0316815260200160006001600160a01b0316815260200186868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250939094525050604051630d94982d60e21b81529293506001600160a01b0389169290915073debbb9309d95dabbfb82411a9c6daa3909b164a49063365260b49061065f9060d9908690899087908e908e90600401611c2b565b6040805180830381865afa15801561067b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069f9190611c7c565b509050803410156106e25760405162461bcd60e51b815260206004820152600d60248201526c746f6f20736d616c6c2066656560981b604482015260640161044c565b8034146107865760006106f58234611ca0565b604051909150600090339083908381818185875af1925050503d806000811461073a576040519150601f19603f3d011682016040523d82523d6000602084013e61073f565b606091505b50509050806107835760405162461bcd60e51b815260206004820152601060248201526f19985a5b1959081d1bc81c99599d5b9960821b604482015260640161044c565b50505b60405163695ef6bf60e01b815273debbb9309d95dabbfb82411a9c6daa3909b164a49063695ef6bf9083906107c890309060d99088908b908b90600401611d21565b6000604051808303818588803b1580156107e157600080fd5b505af11580156107f5573d6000803e3d6000fd5b50505050505050505050505050565b61080c6112f6565b6001600160a01b0381166108325760405162461bcd60e51b815260040161044c90611bc7565b600380546001600160a01b0319166001600160a01b0383169081179091556040517fda100d63215e418eb5fdfcdb0b592f13bc6aea387392797c16c70caf4ea8772190600090a250565b6108846112f6565b61088e6000611350565b565b61ffff881660d9146108f05760405162461bcd60e51b815260206004820152602360248201527f6f6e6c792072656365697665206d73672066726f6d206d616e7461207061636960448201526266696360e81b606482015260840161044c565b337317313ce6e47d796e61fdeac34ab1f58e3e089082148061092557503373debbb9309d95dabbfb82411a9c6daa3909b164a4145b6109715760405162461bcd60e51b815260206004820152601860248201527f6f6e6c79206e6174697665206f66742063616e2063616c6c0000000000000000604482015260640161044c565b6001546001600160a01b038581169116146109dd5760405162461bcd60e51b815260206004820152602660248201527f6f6e6c792072656365697665206d73672066726f6d206d616e746150616369666044820152650d2c6a6d8e0f60d31b606482015260840161044c565b6000806109ec83850185611d88565b6001600160a01b0380831660009081526004602052604090205492945090925016610a1a57610a1a82611178565b6000337317313ce6e47d796e61fdeac34ab1f58e3e0890821415610b245760035460025460405163a9059cbb60e01b81526001600160a01b039092166004830152602482015260009073ffffffff7d3875460d4509eb8d0362c611b4e8419063a9059cbb906044016020604051808303816000875af1158015610aa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac59190611c09565b905080610b075760405162461bcd60e51b815260206004820152601060248201526f6661696c656420746f2063686172676560801b604482015260640161044c565b73ffffffff7d3875460d4509eb8d0362c611b4e841915050610c69565b3373debbb9309d95dabbfb82411a9c6daa3909b164a41415610c2c5760035460025460405163a9059cbb60e01b81526001600160a01b039092166004830152602482015260009073ffffffffda2a05fb50e7ae99275f4341aed433799063a9059cbb906044016020604051808303816000875af1158015610ba9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcd9190611c09565b905080610c0f5760405162461bcd60e51b815260206004820152601060248201526f6661696c656420746f2063686172676560801b604482015260640161044c565b73ffffffffda2a05fb50e7ae99275f4341aed43379915050610c69565b60405162461bcd60e51b815260206004820152601260248201527134b73b30b634b21036b9b39739b2b73232b960711b604482015260640161044c565b610cd283826001600160a01b03811673ffffffff7d3875460d4509eb8d0362c611b4e84114610c9d5761012160f31b610ca4565b61010160f31b5b600254610cb1908b611ca0565b6001600160a01b0380891660009081526004602052604090205416876113a0565b5050505050505050505050565b6003546001600160a01b0316336001600160a01b031614610d125760405162461bcd60e51b815260040161044c90611b98565b600281905560035460405182916001600160a01b0316907f405485c96e1fef0d0e7aa1b6bc6f839d6e825f49f9e5607dc07fcd69e098970690600090a350565b6003546001600160a01b0316336001600160a01b031614610d855760405162461bcd60e51b815260040161044c90611b98565b6001600160a01b038084166000908152600460205260409020541680610dbd5760405162461bcd60e51b815260040161044c90611bc7565b6040516308aea7fd60e41b815273ffffffff7d3875460d4509eb8d0362c611b4e84160048201526000906001600160a01b03831690638aea7fd0906024016020604051808303816000875af1158015610e1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3e9190611bf0565b60405163095ea7b360e01b81527317313ce6e47d796e61fdeac34ab1f58e3e08908260048201526024810182905290915073ffffffff7d3875460d4509eb8d0362c611b4e8419063095ea7b3906044016020604051808303816000875af1158015610ead573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed19190611c09565b5060006040518060600160405280610ee63390565b6001600160a01b0316815260200160006001600160a01b0316815260200186868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250939094525050604051630d94982d60e21b81529293506001600160a01b038916929091507317313ce6e47d796e61fdeac34ab1f58e3e0890829063365260b490610f8f9060d9908690899087908e908e90600401611c2b565b6040805180830381865afa158015610fab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fcf9190611c7c565b509050803410156110125760405162461bcd60e51b815260206004820152600d60248201526c746f6f20736d616c6c2066656560981b604482015260640161044c565b8034146110b65760006110258234611ca0565b604051909150600090339083908381818185875af1925050503d806000811461106a576040519150601f19603f3d011682016040523d82523d6000602084013e61106f565b606091505b50509050806110b35760405162461bcd60e51b815260206004820152601060248201526f19985a5b1959081d1bc81c99599d5b9960821b604482015260640161044c565b50505b60405163695ef6bf60e01b81527317313ce6e47d796e61fdeac34ab1f58e3e0890829063695ef6bf9083906107c890309060d99088908b908b90600401611d21565b6111006112f6565b6001600160a01b0381166111565760405162461bcd60e51b815260206004820152601860248201527f496e76616c6964206d616e746150616369666963536c70780000000000000000604482015260640161044c565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381811660009081526004602052604090205416156111e05760405162461bcd60e51b815260206004820152601d60248201527f616c726561647920736574206465726976617469766541646472657373000000604482015260640161044c565b6000604051806020016111f2906119db565b601f1982820381018352601f9091011660405290506001600160a01b038216600061121e8183856115e6565b6001600160a01b0385811660008181526004602052604080822080546001600160a01b031916948616948517905551939450919290917f57b0e11e6397ba91fdcf1893a12f81fa7f83af6687a4c7c51bb7ec5cc87b700991a350505050565b6112856112f6565b6001600160a01b0381166112ea5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161044c565b6112f381611350565b50565b6000546001600160a01b0316331461088e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161044c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000836001600160801b0316116113f95760405162461bcd60e51b815260206004820152601d60248201527f616d6f756e74206d7573742062652067726561746572207468616e2030000000604482015260640161044c565b61140d8587856001600160801b03166116ee565b60408051600160f81b6020820152606084901b6bffffffffffffffffffffffff191660218201528151601581830301815260358201928390526309e4f00160e01b909252600091735D0Fe2b02d449e47715596cd256e59d501109519916309e4f00191611489918b91469143918c918c91908b90603901611dca565b600060405180830381865af41580156114a6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114ce9190810190611e76565b9050600080600073f1d4797e51a4640a76769a50b57abe7479add3d86001600160a01b031663bddef61a60006040518263ffffffff1660e01b81526004016115169190611f23565b606060405180830381865afa158015611533573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115579190611f4b565b9194509250905061080d63b648f3fe61156e611836565b73ffffffff7cc06abdf7201b350a1265c62c8601d2868887876040518763ffffffff1660e01b81526004016115a896959493929190612001565b600060405180830381600087803b1580156115c257600080fd5b505af11580156115d6573d6000803e3d6000fd5b5050505050505050505050505050565b6000834710156116385760405162461bcd60e51b815260206004820152601d60248201527f437265617465323a20696e73756666696369656e742062616c616e6365000000604482015260640161044c565b81516116865760405162461bcd60e51b815260206004820181905260248201527f437265617465323a2062797465636f6465206c656e677468206973207a65726f604482015260640161044c565b8282516020840186f590506001600160a01b0381166116e75760405162461bcd60e51b815260206004820152601960248201527f437265617465323a204661696c6564206f6e206465706c6f7900000000000000604482015260640161044c565b9392505050565b6001600160a01b03831661173b5760405162461bcd60e51b8152602060048201526014602482015273496e76616c69642061737365744164647265737360601b604482015260640161044c565b604051631932052960e11b81526001600160a01b0383166004820152600090732fD8bbF5dc8b342C09ABF34f211b3488e2d9d691906332640a5290602401602060405180830381865af4158015611796573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ba9190611bf0565b905060006117c7826118dd565b60405163b9f813ff60e01b81529091506108049063b9f813ff906117fd9088908790869067ffffffffffffffff90600401612063565b600060405180830381600087803b15801561181757600080fd5b505af115801561182b573d6000803e3d6000fd5b505050505050505050565b604080518082018252600080825260606020830152825160018082528185019094529192909190816020015b606081526020019060019003908161186257905050604051600060208201526103f760e11b6021820152909150602501604051602081830303815290604052816000815181106118b4576118b46120a5565b602090810291909101810191909152604080518082019091526001815290810191909152919050565b60408051808201825260008082526060602083018190528351600280825291810190945291929091816020015b606081526020019060019003908161190a57905050604051600060208201526103f760e11b60218201529091506025016040516020818303038152906040528160008151811061195c5761195c6120a5565b60200260200101819052508260405160200161198f9190600160f81b815260018101919091526000602182015260220190565b604051602081830303815290604052816001815181106119b1576119b16120a5565b60209081029190910181019190915260408051808201909152600181529081019190915292915050565b6105a8806120bc83390190565b6001600160a01b03811681146112f357600080fd5b60008083601f840112611a0f57600080fd5b50813567ffffffffffffffff811115611a2757600080fd5b602083019150836020828501011115611a3f57600080fd5b9250929050565b600080600060408486031215611a5b57600080fd5b8335611a66816119e8565b9250602084013567ffffffffffffffff811115611a8257600080fd5b611a8e868287016119fd565b9497909650939450505050565b600060208284031215611aad57600080fd5b81356116e7816119e8565b67ffffffffffffffff811681146112f357600080fd5b60008060008060008060008060c0898b031215611aea57600080fd5b883561ffff81168114611afc57600080fd5b9750602089013567ffffffffffffffff80821115611b1957600080fd5b611b258c838d016119fd565b909950975060408b01359150611b3a82611ab8565b90955060608a0135945060808a0135935060a08a01359080821115611b5e57600080fd5b50611b6b8b828c016119fd565b999c989b5096995094979396929594505050565b600060208284031215611b9157600080fd5b5035919050565b60208082526015908201527436bab9ba1031329039b1b934b83a2a3934b3b3b2b960591b604082015260600190565b6020808252600f908201526e696e76616c6964206164647265737360881b604082015260600190565b600060208284031215611c0257600080fd5b5051919050565b600060208284031215611c1b57600080fd5b815180151581146116e757600080fd5b61ffff87168152856020820152846040820152831515606082015260a060808201528160a0820152818360c0830137600081830160c090810191909152601f909201601f1916010195945050505050565b60008060408385031215611c8f57600080fd5b505080516020909101519092909150565b600082821015611cc057634e487b7160e01b600052601160045260246000fd5b500390565b60005b83811015611ce0578181015183820152602001611cc8565b83811115611cef576000848401525b50505050565b60008151808452611d0d816020860160208601611cc5565b601f01601f19169290920160200192915050565b600060018060a01b03808816835261ffff8716602084015285604084015284606084015260a060808401528084511660a08401528060208501511660c0840152506040830151606060e0840152611d7c610100840182611cf5565b98975050505050505050565b60008060408385031215611d9b57600080fd5b8235611da6816119e8565b9150602083013563ffffffff81168114611dbf57600080fd5b809150509250929050565b6001600160a01b038816815260208101879052604081018690526001600160f01b0319851660608201526001600160801b038416608082015261010060a08201819052600090611e1c83820186611cf5565b905082810360c0840152600e81526d26b0b73a30a830b1b4b334b1ab1960911b60208201526040810191505063ffffffff831660e083015298975050505050505050565b634e487b7160e01b600052604160045260246000fd5b600060208284031215611e8857600080fd5b815167ffffffffffffffff80821115611ea057600080fd5b818401915084601f830112611eb457600080fd5b815181811115611ec657611ec6611e60565b604051601f8201601f19908116603f01168101908382118183101715611eee57611eee611e60565b81604052828152876020848701011115611f0757600080fd5b611f18836020830160208801611cc5565b979650505050505050565b6020810160048310611f4557634e487b7160e01b600052602160045260246000fd5b91905290565b600080600060608486031215611f6057600080fd5b8351611f6b81611ab8565b602085015160408601519194509250611f8381611ab8565b809150509250925092565b60006040830160ff835116845260208084015160408287015282815180855260608801915060608160051b8901019450838301925060005b81811015611ff457605f19898703018352611fe2868551611cf5565b95509284019291840191600101611fc6565b5093979650505050505050565b60c08152600061201460c0830189611f8e565b6001600160a01b038816602084015267ffffffffffffffff878116604085015283820360608501526120468288611cf5565b925085608085015280851660a08501525050979650505050505050565b60018060a01b038516815283602082015260806040820152600061208a6080830185611f8e565b905067ffffffffffffffff8316606083015295945050505050565b634e487b7160e01b600052603260045260246000fdfe608060405234801561001057600080fd5b506001600081905580546001600160a01b03191633179055610571806100376000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806317e0f252146100465780638aea7fd01461005b578063f7260d3e14610081575b600080fd5b6100596100543660046104b7565b6100ac565b005b61006e6100693660046104d0565b610240565b6040519081526020015b60405180910390f35b600154610094906001600160a01b031681565b6040516001600160a01b039091168152602001610078565b6100b461045d565b6001546001600160a01b031633146100ff5760405162461bcd60e51b81526020600482015260096024820152683337b93134b23232b760b91b60448201526064015b60405180910390fd5b8061013d5760405162461bcd60e51b815260206004820152600e60248201526d62616c616e636520746f206c6f7760901b60448201526064016100f6565b6001546040516000916001600160a01b03169083908381818185875af1925050503d806000811461018a576040519150601f19603f3d011682016040523d82523d6000602084013e61018f565b606091505b50509050806101e05760405162461bcd60e51b815260206004820152601d60248201527f6661696c656420746f2077697468647261774e6174697665546f6b656e00000060448201526064016100f6565b600154604080513381526001600160a01b03909216602083015260008282015260608201849052517f3115d1449a7b732c986cba18244e897a450f61e1bb8d589cd2e69e6c8924f9f79181900360800190a15061023d6001600055565b50565b600061024a61045d565b6001546001600160a01b031633146102905760405162461bcd60e51b81526020600482015260096024820152683337b93134b23232b760b91b60448201526064016100f6565b6001600160a01b0382166102d65760405162461bcd60e51b815260206004820152600d60248201526c0696e76616c696420657263323609c1b60448201526064016100f6565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa15801561031d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103419190610500565b9050806103815760405162461bcd60e51b815260206004820152600e60248201526d62616c616e636520746f206c6f7760901b60448201526064016100f6565b60015460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018390529084169063a9059cbb906044016020604051808303816000875af11580156103d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f89190610519565b50600154604080513381526001600160a01b0392831660208201529185168282015260608201839052517f3115d1449a7b732c986cba18244e897a450f61e1bb8d589cd2e69e6c8924f9f79181900360800190a190506104586001600055565b919050565b600260005414156104b05760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016100f6565b6002600055565b6000602082840312156104c957600080fd5b5035919050565b6000602082840312156104e257600080fd5b81356001600160a01b03811681146104f957600080fd5b9392505050565b60006020828403121561051257600080fd5b5051919050565b60006020828403121561052b57600080fd5b815180151581146104f957600080fdfea26469706673582212208cdaeacfdd5c4018a525a04627735e0394975d213762f15d3134e53ec33ca9a164736f6c634300080a0033a2646970667358221220b7bcb807772d4af83d75b6cb351240918152db91939504b144944482c690acfa64736f6c634300080a0033",
  "deployedBytecode": "$e184f4046250cd750dfdb139628ab13bdc$__916309e4f00191611489918b91469143918c918c91908b90603901611dca565b600060405180830381865af41580156114a6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114ce9190810190611e76565b9050600080600073f1d4797e51a4640a76769a50b57abe7479add3d86001600160a01b031663bddef61a60006040518263ffffffff1660e01b81526004016115169190611f23565b606060405180830381865afa158015611533573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115579190611f4b565b9194509250905061080d63b648f3fe61156e611836565b73ffffffff7cc06abdf7201b350a1265c62c8601d2868887876040518763ffffffff1660e01b81526004016115a896959493929190612001565b600060405180830381600087803b1580156115c257600080fd5b505af11580156115d6573d6000803e3d6000fd5b5050505050505050505050505050565b6000834710156116385760405162461bcd60e51b815260206004820152601d60248201527f437265617465323a20696e73756666696369656e742062616c616e6365000000604482015260640161044c565b81516116865760405162461bcd60e51b815260206004820181905260248201527f437265617465323a2062797465636f6465206c656e677468206973207a65726f604482015260640161044c565b8282516020840186f590506001600160a01b0381166116e75760405162461bcd60e51b815260206004820152601960248201527f437265617465323a204661696c6564206f6e206465706c6f7900000000000000604482015260640161044c565b9392505050565b6001600160a01b03831661173b5760405162461bcd60e51b8152602060048201526014602482015273496e76616c69642061737365744164647265737360601b604482015260640161044c565b604051631932052960e11b81526001600160a01b038316600482015260009073__$ddfb0e6c1c4d05795fcce73a90830b0995$__906332640a5290602401602060405180830381865af4158015611796573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ba9190611bf0565b905060006117c7826118dd565b60405163b9f813ff60e01b81529091506108049063b9f813ff906117fd9088908790869067ffffffffffffffff90600401612063565b600060405180830381600087803b15801561181757600080fd5b505af115801561182b573d6000803e3d6000fd5b505050505050505050565b604080518082018252600080825260606020830152825160018082528185019094529192909190816020015b606081526020019060019003908161186257905050604051600060208201526103f760e11b6021820152909150602501604051602081830303815290604052816000815181106118b4576118b46120a5565b602090810291909101810191909152604080518082019091526001815290810191909152919050565b60408051808201825260008082526060602083018190528351600280825291810190945291929091816020015b606081526020019060019003908161190a57905050604051600060208201526103f760e11b60218201529091506025016040516020818303038152906040528160008151811061195c5761195c6120a5565b60200260200101819052508260405160200161198f9190600160f81b815260018101919091526000602182015260220190565b604051602081830303815290604052816001815181106119b1576119b16120a5565b60209081029190910181019190915260408051808201909152600181529081019190915292915050565b6105a8806120bc83390190565b6001600160a01b03811681146112f357600080fd5b60008083601f840112611a0f57600080fd5b50813567ffffffffffffffff811115611a2757600080fd5b602083019150836020828501011115611a3f57600080fd5b9250929050565b600080600060408486031215611a5b57600080fd5b8335611a66816119e8565b9250602084013567ffffffffffffffff811115611a8257600080fd5b611a8e868287016119fd565b9497909650939450505050565b600060208284031215611aad57600080fd5b81356116e7816119e8565b67ffffffffffffffff811681146112f357600080fd5b60008060008060008060008060c0898b031215611aea57600080fd5b883561ffff81168114611afc57600080fd5b9750602089013567ffffffffffffffff80821115611b1957600080fd5b611b258c838d016119fd565b909950975060408b01359150611b3a82611ab8565b90955060608a0135945060808a0135935060a08a01359080821115611b5e57600080fd5b50611b6b8b828c016119fd565b999c989b5096995094979396929594505050565b600060208284031215611b9157600080fd5b5035919050565b60208082526015908201527436bab9ba1031329039b1b934b83a2a3934b3b3b2b960591b604082015260600190565b6020808252600f908201526e696e76616c6964206164647265737360881b604082015260600190565b600060208284031215611c0257600080fd5b5051919050565b600060208284031215611c1b57600080fd5b815180151581146116e757600080fd5b61ffff87168152856020820152846040820152831515606082015260a060808201528160a0820152818360c0830137600081830160c090810191909152601f909201601f1916010195945050505050565b60008060408385031215611c8f57600080fd5b505080516020909101519092909150565b600082821015611cc057634e487b7160e01b600052601160045260246000fd5b500390565b60005b83811015611ce0578181015183820152602001611cc8565b83811115611cef576000848401525b50505050565b60008151808452611d0d816020860160208601611cc5565b601f01601f19169290920160200192915050565b600060018060a01b03808816835261ffff8716602084015285604084015284606084015260a060808401528084511660a08401528060208501511660c0840152506040830151606060e0840152611d7c610100840182611cf5565b98975050505050505050565b60008060408385031215611d9b57600080fd5b8235611da6816119e8565b9150602083013563ffffffff81168114611dbf57600080fd5b809150509250929050565b6001600160a01b038816815260208101879052604081018690526001600160f01b0319851660608201526001600160801b038416608082015261010060a08201819052600090611e1c83820186611cf5565b905082810360c0840152600e81526d26b0b73a30a830b1b4b334b1ab1960911b60208201526040810191505063ffffffff831660e083015298975050505050505050565b634e487b7160e01b600052604160045260246000fd5b600060208284031215611e8857600080fd5b815167ffffffffffffffff80821115611ea057600080fd5b818401915084601f830112611eb457600080fd5b815181811115611ec657611ec6611e60565b604051601f8201601f19908116603f01168101908382118183101715611eee57611eee611e60565b81604052828152876020848701011115611f0757600080fd5b611f18836020830160208801611cc5565b979650505050505050565b6020810160048310611f4557634e487b7160e01b600052602160045260246000fd5b91905290565b600080600060608486031215611f6057600080fd5b8351611f6b81611ab8565b602085015160408601519194509250611f8381611ab8565b809150509250925092565b60006040830160ff835116845260208084015160408287015282815180855260608801915060608160051b8901019450838301925060005b81811015611ff457605f19898703018352611fe2868551611cf5565b95509284019291840191600101611fc6565b5093979650505050505050565b60c08152600061201460c0830189611f8e565b6001600160a01b038816602084015267ffffffffffffffff878116604085015283820360608501526120468288611cf5565b925085608085015280851660a08501525050979650505050505050565b60018060a01b038516815283602082015260806040820152600061208a6080830185611f8e565b905067ffffffffffffffff8316606083015295945050505050565b634e487b7160e01b600052603260045260246000fdfe608060405234801561001057600080fd5b506001600081905580546001600160a01b03191633179055610571806100376000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806317e0f252146100465780638aea7fd01461005b578063f7260d3e14610081575b600080fd5b6100596100543660046104b7565b6100ac565b005b61006e6100693660046104d0565b610240565b6040519081526020015b60405180910390f35b600154610094906001600160a01b031681565b6040516001600160a01b039091168152602001610078565b6100b461045d565b6001546001600160a01b031633146100ff5760405162461bcd60e51b81526020600482015260096024820152683337b93134b23232b760b91b60448201526064015b60405180910390fd5b8061013d5760405162461bcd60e51b815260206004820152600e60248201526d62616c616e636520746f206c6f7760901b60448201526064016100f6565b6001546040516000916001600160a01b03169083908381818185875af1925050503d806000811461018a576040519150601f19603f3d011682016040523d82523d6000602084013e61018f565b606091505b50509050806101e05760405162461bcd60e51b815260206004820152601d60248201527f6661696c656420746f2077697468647261774e6174697665546f6b656e00000060448201526064016100f6565b600154604080513381526001600160a01b03909216602083015260008282015260608201849052517f3115d1449a7b732c986cba18244e897a450f61e1bb8d589cd2e69e6c8924f9f79181900360800190a15061023d6001600055565b50565b600061024a61045d565b6001546001600160a01b031633146102905760405162461bcd60e51b81526020600482015260096024820152683337b93134b23232b760b91b60448201526064016100f6565b6001600160a01b0382166102d65760405162461bcd60e51b815260206004820152600d60248201526c0696e76616c696420657263323609c1b60448201526064016100f6565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa15801561031d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103419190610500565b9050806103815760405162461bcd60e51b815260206004820152600e60248201526d62616c616e636520746f206c6f7760901b60448201526064016100f6565b60015460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018390529084169063a9059cbb906044016020604051808303816000875af11580156103d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f89190610519565b50600154604080513381526001600160a01b0392831660208201529185168282015260608201839052517f3115d1449a7b732c986cba18244e897a450f61e1bb8d589cd2e69e6c8924f9f79181900360800190a190506104586001600055565b919050565b600260005414156104b05760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016100f6565b6002600055565b6000602082840312156104c957600080fd5b5035919050565b6000602082840312156104e257600080fd5b81356001600160a01b03811681146104f957600080fd5b9392505050565b60006020828403121561051257600080fd5b5051919050565b60006020828403121561052b57600080fd5b815180151581146104f957600080fdfea26469706673582212208cdaeacfdd5c4018a525a04627735e0394975d213762f15d3134e53ec33ca9a164736f6c634300080a0033a2646970667358221220b7bcb807772d4af83d75b6cb351240918152db91939504b144944482c690acfa64736f6c634300080a0033",
  "libraries": {
    "AddressToAccount": "0x2fD8bbF5dc8b342C09ABF34f211b3488e2d9d691",
    "BuildCallData": "0x5D0Fe2b02d449e47715596cd256e59d501109519"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 818,
        "contract": "contracts/MoonbeamReceiver.sol:MoonbeamReceiver",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1386,
        "contract": "contracts/MoonbeamReceiver.sol:MoonbeamReceiver",
        "label": "mantaPacificSlpx",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1388,
        "contract": "contracts/MoonbeamReceiver.sol:MoonbeamReceiver",
        "label": "layerZeroFee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1390,
        "contract": "contracts/MoonbeamReceiver.sol:MoonbeamReceiver",
        "label": "scriptTrigger",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1394,
        "contract": "contracts/MoonbeamReceiver.sol:MoonbeamReceiver",
        "label": "callerToDerivativeAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
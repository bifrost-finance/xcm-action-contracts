{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Create2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Create2.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\n * `CREATE2` can be used to compute in advance the address where a smart\n * contract will be deployed, which allows for interesting new mechanisms known\n * as 'counterfactual interactions'.\n *\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\n * information.\n */\nlibrary Create2 {\n    /**\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\n     * will be deployed can be known in advance via {computeAddress}.\n     *\n     * The bytecode for a contract can be obtained from Solidity with\n     * `type(contractName).creationCode`.\n     *\n     * Requirements:\n     *\n     * - `bytecode` must not be empty.\n     * - `salt` must have not been used for `bytecode` already.\n     * - the factory must have a balance of at least `amount`.\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\n     */\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\n        require(address(this).balance >= amount, \"Create2: insufficient balance\");\n        require(bytecode.length != 0, \"Create2: bytecode length is zero\");\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\n        }\n        require(addr != address(0), \"Create2: Failed on deploy\");\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\n     * `bytecodeHash` or `salt` will result in a new destination address.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\n        return computeAddress(salt, bytecodeHash, address(this));\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40) // Get free memory pointer\n\n            // |                   | ↓ ptr ...  ↓ ptr + 0x0B (start) ...  ↓ ptr + 0x20 ...  ↓ ptr + 0x40 ...   |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\n            // | 0xFF              |            FF                                                             |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\n            // | keccak(start, 85) |            ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ |\n\n            mstore(add(ptr, 0x40), bytecodeHash)\n            mstore(add(ptr, 0x20), salt)\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\n            mstore8(start, 0xff)\n            addr := keccak256(start, 85)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/DerivativeContract.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract DerivativeContract is ReentrancyGuard {\n    address public receiver;\n\n    event Withdraw(address caller, address to, address token, uint256 amount);\n\n    constructor() {\n        receiver = msg.sender;\n    }\n\n    function withdrawErc20Token(\n        address _erc20\n    ) external nonReentrant returns (uint256) {\n        require(msg.sender == receiver, \"forbidden\");\n        require(_erc20 != address(0), \"invalid erc20\");\n        uint256 balance = IERC20(_erc20).balanceOf(address(this));\n        require(balance != 0, \"balance to low\");\n        IERC20(_erc20).transfer(receiver, balance);\n        emit Withdraw(msg.sender, receiver, _erc20, balance);\n        return balance;\n    }\n\n    function withdrawNativeToken(uint256 _amount) external nonReentrant {\n        require(msg.sender == receiver, \"forbidden\");\n        require(_amount != 0, \"balance to low\");\n        (bool success, ) = receiver.call{value: _amount}(\"\");\n        require(success, \"failed to withdrawNativeToken\");\n        emit Withdraw(msg.sender, receiver, address(0), _amount);\n    }\n}\n"
    },
    "contracts/interfaces/ICommonOFT.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface of the IOFT core standard\n */\ninterface ICommonOFT is IERC165 {\n    struct LzCallParams {\n        address payable refundAddress;\n        address zroPaymentAddress;\n        bytes adapterParams;\n    }\n\n    /**\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\n     * _dstChainId - L0 defined chain id to send tokens too\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\n     * _amount - amount of the tokens to transfer\n     * _useZro - indicates to use zro to pay L0 fees\n     * _adapterParam - flexible bytes array to indicate messaging adapter services in L0\n     */\n    function estimateSendFee(\n        uint16 _dstChainId,\n        bytes32 _toAddress,\n        uint _amount,\n        bool _useZro,\n        bytes calldata _adapterParams\n    ) external view returns (uint nativeFee, uint zroFee);\n\n    function estimateSendAndCallFee(\n        uint16 _dstChainId,\n        bytes32 _toAddress,\n        uint _amount,\n        bytes calldata _payload,\n        uint64 _dstGasForCall,\n        bool _useZro,\n        bytes calldata _adapterParams\n    ) external view returns (uint nativeFee, uint zroFee);\n\n    /**\n     * @dev returns the circulating amount of tokens on current chain\n     */\n    function circulatingSupply() external view returns (uint);\n\n    /**\n     * @dev returns the address of the ERC20 token\n     */\n    function token() external view returns (address);\n}\n"
    },
    "contracts/interfaces/IOFTReceiverV2.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.10;\n\ninterface IOFTReceiverV2 {\n    /**\n     * @dev Called by the OFT contract when tokens are received from source chain.\n     * @param _srcChainId The chain id of the source chain.\n     * @param _srcAddress The address of the OFT token contract on the source chain.\n     * @param _nonce The nonce of the transaction on the source chain.\n     * @param _from The address of the account who calls the sendAndCall() on the source chain.\n     * @param _amount The amount of tokens to transfer.\n     * @param _payload Additional data with no specified format.\n     */\n    function onOFTReceived(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        uint64 _nonce,\n        bytes32 _from,\n        uint _amount,\n        bytes calldata _payload\n    ) external;\n}\n"
    },
    "contracts/interfaces/IOFTV2.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.10;\n\nimport \"./ICommonOFT.sol\";\n\n/**\n * @dev Interface of the IOFT core standard\n */\ninterface IOFTV2 is ICommonOFT {\n    /**\n     * @dev send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from`\n     * `_from` the owner of token\n     * `_dstChainId` the destination chain identifier\n     * `_toAddress` can be any size depending on the `dstChainId`.\n     * `_amount` the quantity of tokens in wei\n     * `_refundAddress` the address LayerZero refunds if too much message fee is sent\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\n     */\n    function sendFrom(\n        address _from,\n        uint16 _dstChainId,\n        bytes32 _toAddress,\n        uint _amount,\n        LzCallParams calldata _callParams\n    ) external payable;\n\n    function sendAndCall(\n        address _from,\n        uint16 _dstChainId,\n        bytes32 _toAddress,\n        uint _amount,\n        bytes calldata _payload,\n        uint64 _dstGasForCall,\n        LzCallParams calldata _callParams\n    ) external payable;\n}\n"
    },
    "contracts/interfaces/ISlpx.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.10;\n\ninterface ISlpx {\n    event Mint(\n        address minter,\n        address assetAddress,\n        uint256 amount,\n        address receiver,\n        bytes callcode,\n        string remark\n    );\n    event Redeem(\n        address redeemer,\n        address assetAddress,\n        uint256 amount,\n        address receiver,\n        bytes callcode\n    );\n    event CreateOrder(\n        address assetAddress,\n        uint128 amount,\n        uint64 dest_chain_id,\n        bytes receiver,\n        string remark,\n        uint32 channel_id\n    );\n\n    /// Minted vNative assets such as vASTR, vGLMR, vMOVR\n    function mintVNativeAsset(\n        address receiver,\n        string memory remark\n    ) external payable;\n\n    /// Minted vAssets\n    function mintVAsset(\n        address assetAddress,\n        uint256 amount,\n        address receiver,\n        string memory remark\n    ) external;\n\n    /// Minted vNative assets such as vASTR, vGLMR, vMOVR\n    function mintVNativeAssetWithChannelId(\n        address receiver,\n        string memory remark,\n        uint32 channel_id\n    ) external payable;\n\n    /// Minted vAssets\n    function mintVAssetWithChannelId(\n        address assetAddress,\n        uint256 amount,\n        address receiver,\n        string memory remark,\n        uint32 channel_id\n    ) external;\n\n    /// Redeem assets\n    function redeemAsset(\n        address vAssetAddress,\n        uint256 amount,\n        address receiver\n    ) external;\n\n    /**\n    * @dev Create order to mint vAsset or redeem vAsset on bifrost chain\n    * @param assetAddress The address of the asset to mint or redeem\n    * @param amount The amount of the asset to mint or redeem\n    * @param dest_chain_id When order is executed on Bifrost, Asset/vAsset will be transferred to this chain\n    * @param receiver The receiver address on the destination chain, 20 bytes for EVM, 32 bytes for Substrate\n    * @param remark The remark of the order, less than 32 bytes. For example, \"OmniLS\"\n    * @param channel_id The channel id of the order, you can set it. Bifrost chain will use it to share reward.\n    **/\n    function create_order(\n        address assetAddress,\n        uint128 amount,\n        uint64 dest_chain_id,\n        bytes memory receiver,\n        string memory remark,\n        uint32 channel_id\n    ) external payable;\n}\n"
    },
    "contracts/interfaces/Types.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.10;\n\ninterface Types {\n    enum Operation {\n        Mint,\n        Redeem\n    }\n}\n"
    },
    "contracts/MantaPacificSlpx.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./interfaces/IOFTV2.sol\";\nimport \"./interfaces/Types.sol\";\n\ncontract MantaPacificSlpx is Ownable {\n    address public constant mantaOFT =\n        0x17313cE6e47D796E61fDeAc34Ab1F58e3e089082;\n    address public constant vMantaOFT =\n        0x7746ef546d562b443AE4B4145541a3b1a3D75717;\n    address public constant manta = 0x95CeF13441Be50d20cA4558CC0a27B601aC544E5;\n    uint16 public constant destChainId = 126;\n    bytes32 public remoteContract;\n    uint256 public minAmount;\n\n    event Mint(address indexed caller, uint256 indexed amount);\n    event Redeem(address indexed caller, uint256 indexed amount);\n\n    function setRemoteContract(address _remoteContract) public onlyOwner {\n        require(_remoteContract != address(0), \"Invalid remoteContract\");\n        remoteContract = bytes32(uint256(uint160(_remoteContract)));\n    }\n\n    function setMinAmount(uint256 _minAmount) public onlyOwner {\n        require(_minAmount != 0, \"Invalid minAmount\");\n        minAmount = _minAmount;\n    }\n\n    function create_order(\n        address assetAddress,\n        uint256 amount,\n        uint32 channel_id,\n        uint64 dstGasForCall,\n        bytes calldata adapterParams\n    ) external payable {\n        require(\n            amount >= minAmount,\n            \"amount too small\"\n        );\n\n        address oft;\n        address sender;\n\n        if (assetAddress == manta) {\n            IERC20(assetAddress).transferFrom(_msgSender(), address(this), amount);\n            IERC20(assetAddress).approve(mantaOFT, amount);\n            oft = mantaOFT;\n            sender = address(this);\n        } else if(assetAddress == vMantaOFT) {\n            oft = vMantaOFT;\n            sender = _msgSender();\n        } else {\n            revert(\"Invalid assetAddress\");\n        }\n\n        ICommonOFT.LzCallParams memory callParams = ICommonOFT.LzCallParams(\n                payable(sender),\n                address(0),\n                adapterParams\n            );\n\n        bytes memory payload = abi.encode(_msgSender(), channel_id);\n        (uint256 estimateFee, ) = IOFTV2(oft).estimateSendAndCallFee(\n            destChainId,\n            remoteContract,\n            amount,\n            payload,\n            dstGasForCall,\n            false,\n            adapterParams\n        );\n\n        require(msg.value >= estimateFee, \"too small fee\");\n        if (msg.value != estimateFee) {\n            uint256 refundAmount = msg.value - estimateFee;\n            (bool success, ) = _msgSender().call{value: refundAmount}(\"\");\n            require(success, \"failed to refund\");\n        }\n\n        IOFTV2(oft).sendAndCall{value: estimateFee}(\n            sender,\n            destChainId,\n            remoteContract,\n            amount,\n            payload,\n            dstGasForCall,\n            callParams\n        );\n\n        if (assetAddress == manta) {\n            emit Mint(_msgSender(), amount);\n        } else {\n            emit Redeem(_msgSender(), amount);\n        }\n    }\n\n    function estimateSendAndCallFee(\n        address assetAddress,\n        uint256 amount,\n        uint32 channel_id,\n        uint64 dstGasForCall,\n        bytes calldata adapterParams\n    ) public view returns (uint256) {\n        address oft;\n        address sender;\n\n        if (assetAddress == manta) {\n            oft = mantaOFT;\n            sender = address(this);\n        } else if(assetAddress == vMantaOFT) {\n            oft = vMantaOFT;\n            sender = _msgSender();\n        } else {\n            revert(\"Invalid assetAddress\");\n        }\n\n        ICommonOFT.LzCallParams memory callParams = ICommonOFT.LzCallParams(\n            payable(sender),\n            address(0),\n            adapterParams\n        );\n\n        bytes memory payload = abi.encode(_msgSender(), channel_id);\n        (uint256 estimateFee, ) = IOFTV2(oft).estimateSendAndCallFee(\n            destChainId,\n            remoteContract,\n            amount,\n            payload,\n            dstGasForCall,\n            false,\n            adapterParams\n        );\n\n        return estimateFee;\n    }\n}\n"
    },
    "contracts/MoonbeamReceiver.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Create2.sol\";\nimport \"./interfaces/IOFTReceiverV2.sol\";\nimport \"./interfaces/IOFTV2.sol\";\nimport \"./interfaces/ISlpx.sol\";\nimport \"./DerivativeContract.sol\";\n\ncontract MoonbeamReceiver is Ownable, IOFTReceiverV2 {\n    uint16 public constant destChainId = 217;\n\n    address public constant VMANTA = 0xFFfFFfFfdA2a05FB50e7ae99275F4341AEd43379;\n    address public constant MANTA = 0xfFFffFFf7D3875460d4509eb8d0362c611B4E841;\n    address public constant slpx = 0xF1d4797E51a4640a76769A50b57abE7479ADd3d8;\n    address public constant mantaOFT =\n    0x17313cE6e47D796E61fDeAc34Ab1F58e3e089082;\n    address public constant vMantaProxyOFT =\n    0xDeBBb9309d95DaBbFb82411a9C6Daa3909B164A4;\n    address public mantaPacificSlpx;\n    uint256 public layerZeroFee;\n    address public scriptTrigger;\n    mapping(address => address) public callerToDerivativeAddress;\n\n    event SetDerivativeAddress(\n        address indexed caller,\n        address indexed derivativeAddress\n    );\n    event SetLayerZeroFee(\n        address indexed scriptTrigger,\n        uint256 indexed layerZeroFee\n    );\n    event SetScriptTrigger(address indexed scriptTrigger);\n\n    function setRemoteContract(address _mantaPacificSlpx) public onlyOwner {\n        require(_mantaPacificSlpx != address(0), \"Invalid mantaPacificSlpx\");\n        mantaPacificSlpx = _mantaPacificSlpx;\n    }\n\n    function onOFTReceived(\n        uint16 srcChainId,\n        bytes calldata,\n        uint64,\n        bytes32 from,\n        uint amount,\n        bytes calldata payload\n    ) external override {\n        require(\n            srcChainId == destChainId,\n            \"only receive msg from manta pacific\"\n        );\n        require(\n            _msgSender() == mantaOFT || _msgSender() == vMantaProxyOFT,\n            \"only native oft can call\"\n        );\n        require(\n            address(uint160(uint(from))) == mantaPacificSlpx,\n            \"only receive msg from mantaPacificSlpx\"\n        );\n        (address caller, uint32 channel_id) = abi.decode(\n            payload,\n            (address, uint32)\n        );\n\n        if (callerToDerivativeAddress[caller] == address(0)) {\n            setDerivativeAddress(caller);\n        }\n\n        // vManta:\n        // msg.sender = vMantaProxyOFT, from = mantaPacificSlpx,\n        // Manta:\n        // msg.sender = mantaOFT, from = mantaPacificSlpx\n        address asset_address;\n        if (_msgSender() == mantaOFT) {\n            bool success = IERC20(MANTA).transfer(scriptTrigger, layerZeroFee);\n            require(success, \"failed to charge\");\n            asset_address = MANTA;\n        } else if(_msgSender() == vMantaProxyOFT) {\n            bool success = IERC20(VMANTA).transfer(scriptTrigger, layerZeroFee);\n            require(success, \"failed to charge\");\n            asset_address = VMANTA;\n        } else {\n            revert(\"invalid msg.sender\");\n        }\n\n        IERC20(asset_address).approve(slpx, amount - layerZeroFee);\n        ISlpx(slpx).create_order(\n            asset_address,\n            uint128(amount - layerZeroFee),\n            uint64(block.chainid),\n            abi.encodePacked(callerToDerivativeAddress[caller]),\n            \"MantaPacificV2\",\n            channel_id\n        );\n    }\n\n    function claimVManta(\n        address addr,\n        bytes calldata _adapterParams\n    ) external payable {\n        require(_msgSender() == scriptTrigger, \"must be scriptTrigger\");\n        address derivativeAddress = callerToDerivativeAddress[addr];\n        require(derivativeAddress != address(0), \"invalid address\");\n        uint256 amount = DerivativeContract(derivativeAddress)\n            .withdrawErc20Token(VMANTA);\n        IERC20(VMANTA).approve(vMantaProxyOFT, amount);\n        ICommonOFT.LzCallParams memory callParams = ICommonOFT.LzCallParams(\n            payable(_msgSender()),\n            address(0),\n            _adapterParams\n        );\n        bytes32 toAddress = bytes32(uint256(uint160(addr)));\n        (uint256 estimateFee, ) = IOFTV2(vMantaProxyOFT).estimateSendFee(\n            destChainId,\n            toAddress,\n            amount,\n            false,\n            _adapterParams\n        );\n        require(msg.value >= estimateFee, \"too small fee\");\n        if (msg.value != estimateFee) {\n            uint256 refundAmount = msg.value - estimateFee;\n            (bool success, ) = _msgSender().call{value: refundAmount}(\"\");\n            require(success, \"failed to refund\");\n        }\n        IOFTV2(vMantaProxyOFT).sendFrom{value: estimateFee}(\n            address(this),\n            destChainId,\n            toAddress,\n            amount,\n            callParams\n        );\n    }\n\n    function claimManta(\n        address addr,\n        bytes calldata _adapterParams\n    ) external payable {\n        require(_msgSender() == scriptTrigger, \"must be scriptTrigger\");\n        address derivativeAddress = callerToDerivativeAddress[addr];\n        require(derivativeAddress != address(0), \"invalid address\");\n        uint256 amount = DerivativeContract(derivativeAddress)\n            .withdrawErc20Token(MANTA);\n        IERC20(MANTA).approve(mantaOFT, amount);\n        ICommonOFT.LzCallParams memory callParams = ICommonOFT.LzCallParams(\n            payable(_msgSender()),\n            address(0),\n            _adapterParams\n        );\n        bytes32 toAddress = bytes32(uint256(uint160(addr)));\n        (uint256 estimateFee, ) = IOFTV2(mantaOFT).estimateSendFee(\n            destChainId,\n            toAddress,\n            amount,\n            false,\n            _adapterParams\n        );\n        require(msg.value >= estimateFee, \"too small fee\");\n        if (msg.value != estimateFee) {\n            uint256 refundAmount = msg.value - estimateFee;\n            (bool success, ) = _msgSender().call{value: refundAmount}(\"\");\n            require(success, \"failed to refund\");\n        }\n        IOFTV2(mantaOFT).sendFrom{value: estimateFee}(\n            address(this),\n            destChainId,\n            toAddress,\n            amount,\n            callParams\n        );\n    }\n\n    function setDerivativeAddress(address addr) public {\n        require(\n            callerToDerivativeAddress[addr] == address(0),\n            \"already set derivativeAddress\"\n        );\n        bytes memory bytecode = type(DerivativeContract).creationCode;\n        bytes32 salt = bytes32(uint256(uint160(addr)));\n        address derivativeAddress = Create2.deploy(0, salt, bytecode);\n        callerToDerivativeAddress[addr] = derivativeAddress;\n        emit SetDerivativeAddress(addr, derivativeAddress);\n    }\n\n    function setLayerZeroFee(uint256 _layerZeroFee) external {\n        require(_msgSender() == scriptTrigger, \"must be scriptTrigger\");\n        layerZeroFee = _layerZeroFee;\n        emit SetLayerZeroFee(scriptTrigger, _layerZeroFee);\n    }\n\n    function setScriptTrigger(address _scriptTrigger) external onlyOwner {\n        require(_scriptTrigger != address(0), \"invalid address\");\n        scriptTrigger = _scriptTrigger;\n        emit SetScriptTrigger(_scriptTrigger);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}